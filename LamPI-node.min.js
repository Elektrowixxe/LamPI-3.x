var debug=1,init=0,poll_interval=6E3,log_interval=12E4,alarm_interval=2E3,timer_interval=3E4,webPort=8080,sockPort=5E3,udpPort=5001,tcpPort=5002,tcnt=0,zroot={},devices={},clients=[],loops=[],config={},lampi_admin=[],par=require("./config/params"),mysql=require("mysql");console.log("mySQL loaded");var fs=require("fs");console.log("fs loaded");var strip=require("strip-json-comments");console.log("strip-json-comments loaded");var async=require("async");console.log("ssync loaded");
var logDir=par.homeDir+"/log",rrdDir=par.homeDir+"/rrd",wwwDir=par.homeDir+"/www",connection=mysql.createConnection({host:par.dbHost,user:par.dbUser,password:par.dbPassword,database:par.dbName});function logger(a,c){c=c||debug;if(debug>=c){var b=new Date,b=("00"+(b.getMonth()+1)).slice(-2)+"/"+("00"+b.getDate()).slice(-2)+"/"+b.getFullYear()+" "+("00"+b.getHours()).slice(-2)+":"+("00"+b.getMinutes()).slice(-2)+":"+("00"+b.getSeconds()).slice(-2);console.log("["+b+"] "+a)}}
Array.prototype.contains=function(a){return-1<this.indexOf(a)};
process.argv.forEach(function(a,c,b){if(2>c)logger("process.argv["+c+"] skipping: "+a);else switch(a){case "-i":init=1;logger("Calling init",1);for(a=0;a<loops.length;a++)clearInterval(loops[a]);logger("Suspending "+loops.length+" timers",2);config=readConfig();createDbase(function(a,c){a?logger("init:: ERROR: "+a,0):(logger("init:: createDbase returned "+c,1),Object.keys(config).forEach(function(a){logger("createDbase: "+a+", length: "+config[a].length,1)}),logger("init:: Starting loadDbase",0),
loadDbase(function(a,c){null==a&&logger("init:: loadDbase returned successful "+c,1);var b;b=""+printConfig();logger(b+"<br>init:: done, restarting loops",2);start_loops();init=0}))});break;case "-r":var d="";init=1;for(a=0;a<loops.length;a++)clearInterval(loops[a]);logger("reload:: read the configuration",1);loadDbase(function(a,c){null==a&&logger("init:: loadDbase returned successful "+c,1);d+=printConfig();d+="<br>init:: done, restarting loops";logger(d,2);start_loops();init=0});break;default:logger("Process argv:: Unknown commandline argument "+
a,1)}});var http=require("http");console.log("http loaded");var net=require("net");console.log("net loaded");var dgram=require("dgram");console.log("dgram loaded");var express=require("express");console.log("express loaded");var S=require("string");console.log("string loaded");var exec=require("child_process").exec;console.log("child_process loaded");var serveStatic=require("serve-static");console.log("serve-static loaded");var WebSocketServer=require("ws").Server;console.log("ws loaded");
var SunCalc=require("suncalc");console.log("suncalc loaded");var alarmRouter=require("./modules/alarmRouter");console.log("alarmRouter loaded");var woonveilig=require("./modules/woonveilig");console.log("woonveilig loaded");console.log("All required modules loaded");var app=express();
app.all("/init",function(a,c,b){init=1;logger("Accessing the init section ...",1);var d="",d=d+"init started<br>",d=d+("Suspending "+loops.length+" timers<br>");for(a=0;a<loops.length;a++)clearInterval(loops[a]);config=readConfig();createDbase(function(a,b){a?logger("init:: ERROR: "+a,0):(logger("init:: createDbase returned "+b,1),logger("init:: Starting loadDbase",1),loadDbase(function(a,b){null==a&&logger("init:: loadDbase returned successful "+b,1);d+=printConfig();d+="<br>init:: done, restarting loops";
logger(d,2);c.send(d);start_loops();init=0}))})});app.all("/load",function(a,c,b){logger("Accessing the reload section ...",1);var d="",d=d+"reload started<br>",d=d+("Suspending "+loops.length+" timers<br>");for(a=0;a<loops.length;a++)clearInterval(loops[a]);loadDbase(function(a,b){null==a&&logger("load:: loadDbase returned successful "+b,1);d+=printConfig();d+="<br>load:: done, restarting loops";logger(d,2);c.send(d);start_loops()})});
app.all("/sensors",function(a,c,b){console.log("Accessing the sensors section ...");c.send("sensors")});app.all("/config",function(a,c,b){console.log("Printing configuration ...");c.send(printConfig())});app.use("/alarm",alarmRouter);function readConfig(){var a=fs.readFileSync(par.homeDir+"/config/"+par.configFile,"utf8"),a=JSON.parse(strip(a));3<=debug&&(logger("readConfig:: config read: ",3),console.log(a));return a}
function writeConfig(a){logger("writeConfig:: wrinting configuration to file "+a,1);var c=JSON.stringify(config,null,2);fs.writeFileSync(par.homeDir+"/config/"+a,c)}function listConfigDir(){return fs.readdirSync(par.homeDir+"/config")}
function printConfig(){var a="<!DOCTYPE html>";Object.keys(config).forEach(function(c){a+="<h1>"+c+"</h1>";logger("printConfig: "+c+", length: "+config[c].length,2);a+='<table style="max_width: 100%; border: 1px solid black; border-collapse: collapse;" class="config_table">';a+='<tr class="config_line">';switch(c){case "settings":case "brands":case "rooms":case "timers":case "scenes":case "handsets":case "devices":case "sensors":case "controllers":case "rules":Object.keys(config[c][0]).forEach(function(c){a+=
'<th style="background-color: green; color: white;">'+c+"</th>"})}a+="</tr>";for(j=0;j<config[c].length;j++){a+="<tr>";switch(c){case "settings":case "brands":case "sensors":case "rooms":case "scenes":case "devices":case "timers":case "handsets":case "controllers":case "rules":Object.keys(config[c][j]).forEach(function(b){switch(b){case "lastUpdate":a+='<td style="border: 1px solid black;">&nbsp'+printTime(config[c][j][b])+"</td>";break;case "sensor":a+='<td style="border: 1px solid black;"><table>';
Object.keys(config[c][j].sensor).forEach(function(b){a+="<tr>";a+="<td>"+printTime(config[c][j].sensor[b].lastUpdate)+"</td>";a+="<td>"+b+": "+parseFloat(config[c][j].sensor[b].val).toFixed(1)+"</td>"});a+="</table></td>";a+='<td style="border: 1px solid black;"></td>';break;case "seq":b=config[c][j].seq.split(",");a+='<td style="min-width=100px; border: 1px solid black;">';a+="<table><tr>";for(var d=0;d<b.length;d+=2){a+="<tr><td>";a+="<td>ics: "+b[d]+"</td>";a+="<td>, time: "+b[d+1]+"</td>";var e=
/\d+/,f=b[d].match(e);if(-1!=b[d].indexOf("Fa"))0<=idRoom(f)&&(a+="<td>, Room "+config.rooms[idRoom(f)].name+" All Off</td>");else{var g=b[d].indexOf("D"),e=b[d].substr(g+1,2).match(e),f=findDevice(f,e);a=0<=f?a+("<td>, "+config.devices[f].name+"</td>"):a+'<td style="border: 1px solid black;">, CHECK THE DEVICE, MAY NOT EXTIST</td>'}}a+="</table></td>";break;case "scene":if("handsets"!=c){a+='<td style="border: 1px solid black;">&nbsp'+config[c][j][b]+"</td>";break}b=config[c][j].scene.split(",");
a+='<td style="border: 1px solid black;">&nbsp';a+="<table><tr>";for(d=0;d<b.length;d+=2)a+="<tr><td>",a+="<td>scene: "+b[d]+"</td>",a+="<td>, time: "+b[d+1]+"</td>",e=/\d+/,f=b[d].match(e),-1!=b[d].indexOf("Fa")?0<=idRoom(f)&&(a+="<td>, Room "+config.rooms[idRoom(f)].name+" All Off</td>"):(g=b[d].indexOf("D"),e=b[d].substr(g+1,2).match(e),f=findDevice(f,e),a=0<=f?a+("<td>, "+config.devices[f].name+"</td>"):a+'<td style="border: 1px solid black;">, CHECK THE DEVICE, MAY NOT EXTIST</td>');a+="</table>";
a+="</td>";break;case "jrule":a+="<tr><td>";a+='<td style="border: 1px solid black;" colspan="4">, jrule: '+JSON.stringify(config[c][j].jrule)+"</td>";break;case "brule":a+="<tr><td>";a+='<td style="border: 1px solid black;" colspan="4">, brule: '+JSON.stringify(config[c][j].brule)+"</td>";break;default:a+='<td style="border: 1px solid black;">&nbsp'+config[c][j][b]+"</td>"}})}a+="</tr>"}a+="<br></table>"});a+="<H1>Parameters</H1>";a+="<table>";Object.keys(par).forEach(function(c){a+="<tr>";a+="<td>"+
c+"</td>";a+="<td>: "+par[c]+"</td>";a+="</tr>"});return a+="<br></table>"}
function zwave_init(a){var c=http.request({host:par.zHost,path:"/ZWaveAPI/Data/0",port:"8083",method:"GET",headers:{"Content-Type":"application/json"}},function(c){var d=c.statusCode;if(404===d||403===d)logger("wave_init:: ERROR: Page not found\n",0),a("No Page",null);var e="";c.on("data",function(a){e+=a});c.on("end",function(){3<=debug&&console.log(e);try{zroot=JSON.parse(e)}catch(c){logger("socketHandler:: JSON parse error: "+c,1),zroot=null}null!=zroot&&(devices=zroot.devices);logger("Successfully read Z-Wave Data, #devices: "+
Object.keys(devices).length,1);a(null,"zwave_init done")})});c.on("error",function(c){logger("zwave_init:: ERROR opening connection to zwave host, "+c.message,1);a("zwave no connection",null)});c.end()}
function zwave_reset(a){var c=http.request({host:par.zHost,path:"/ZWaveAPI/Run/SerialAPISoftReset(1)",port:"8083",method:"GET",headers:{"Content-Type":"application/json"}},function(c){var d=c.statusCode;if(404===d||403===d)logger("wave_reset:: ERROR: Page not found\n",0),a("No Page",null);c.on("data",function(a){});c.on("end",function(){logger("Successfully reset Z-Wave API, #devices: ",1);a(null,"zwave_reset done")})});c.on("error",function(c){logger("zwave_reset:: ERROR opening connection to zwave host, "+
c.message,1);a("zwave no connection",null)});c.end()}
var zwave_upd_options={host:par.zHost,path:"/ZWaveAPI/Data/"+(Math.floor(Date.now()/1E3)-alarm_interval),port:"8083",method:"GET",headers:{"Content-Type":"application/json"}},zwave_upd_cb=function(a){var c="";a.on("data",function(a){c+=a});a.on("end",function(){3<=debug&&console.log(c);var a=JSON.parse(c);Object.keys(a).forEach(function(c){for(var e=zroot,f=c.split("."),g=g;g<f.length-1;g++)pe=f[g],e=e[f[pe]];void 0===e&&logger("ERROR: pobj is undefined line 474, "+f.slice(-1),0);e[f.slice(-1)]=a[c]});
logger("Successfully read the Z-Wave Data stucture, Read "+Object.keys(a).length+" records",2)})};
function broadcast(a,c,b){logger("broadcast:: message: "+a,2);var d=[],e=[];clients.forEach(function(c){e.push(c);d.push(function(c){setTimeout(function(){var d=e.shift();if(void 0!=b&&0<=b.indexOf(d.type))logger("broadcast:: Masking for socket: "+d.name+", type: "+d.type,3),c(null,d.name+"-masked");else switch(d.type){case "raw":logger("Broadcast to Rawsocket: "+d.name,2);1!=d.write(a)?(logger("broadcast:: ERROR raw socket error",0),c("broadcast raw error",null)):(logger("broadcast :: raw client: "+
d.name,3),c(null,d.name));break;case "ws":d.send(a,function(a){a?(logger("broadcast:: ERROR ws send error: "+a,0),c(a,null)):(logger("broadcast :: web client: "+d.name,3),c(null,d.name))});break;default:logger("broadcast:: WARNING unknown type: "+d.type,2),c("broadcast:: Unknown type: "+d.type,null)}},300)})});async.series(d,function(a,c){a?logger("broadcast:: ERROR ERROR: "+a,0):logger("broadcast:: finished, results: "+c,2)})}
var HOST="0.0.0.0",server=net.createServer(function(a){a.name=a.remoteAddress+":"+a.remotePort;a.type="raw";a.trusted=1;logger("SOCKET:: socket server connected to: "+a.name,1);clients.push(a);a.on("end",function(){logger("SOCKET:: socket server "+a.name+" disconnected",1);clients.splice(clients.indexOf(a),1)});a.on("text",function(a){logger("SOCKET:: socket server received text: "+a,1)});a.on("data",function(c){logger("SOCKET:: socket data received: "+c+", trusted: "+a.trusted,2);0==init?socketHandler(c,
a):logger("socket:: WARNING: Discard incoming message",2)});a.on("message",function(c){logger("SOCKET:: socket message received: "+c,2);0==init?socketHandler(c,a):logger("socket:: WARNING: Discard incoming message",2)});a.on("upgrade",function(a,b,d){logger("SOCKET:: socket upgrade received: "+a,1);b.write(JSON.stringify({tcnt:868,type:"json",action:"alarm",scene:"",message:"NODE ALARM"}))});a.on("error",function(a){logger("SOCKET:: Error: "+a,0)});a.on("connect",function(){logger("SOCKET:: socket Connection Established ",
1)})});server.listen(tcpPort,HOST,function(){logger("TCP server listening to addr:port: "+HOST+":"+tcpPort)});function checkIP(a){a=a.split(".");a[0]=a[0].split("//")[1];var c=par.thisHost.split(".");if(c[0]==a[0]&&c[1]==a[1]&&c[2]==a[2])return logger("checkIP:: client is from local network",1),1;logger("checkIP:: client is from remote network: "+a[0]+" "+a[1]+" "+a[2],1);return 0}var wss=new WebSocketServer({port:sockPort});
wss.on("connection",function(a){a.name=a.upgradeReq.headers.origin;a.type="ws";a.trusted=checkIP(a.upgradeReq.headers.origin);logger("WS:: new socket connected: "+a.name,1);clients.push(a);a.on("message",function(c){2<=debug&&console.log("WS rcv msg, trusted: "+a.trusted+": %s",c);0==init?socketHandler(c,a):logger("websocket:: WARNING: Discard incoming message",2)});a.on("close",function(){logger("WS:: socket "+a.name+" disconnected",1);clients.splice(clients.indexOf(a),1)})});var userver=dgram.createSocket("udp4");
userver.on("error",function(a){console.log("UDP server error:\n"+a.stack);userver.close()});userver.on("message",function(a,c){logger("UDP message from "+c.address+":"+c.port,2);logger("UDP server  msg: "+a,3);c.name=c.address+":"+c.port;c.type="udp";0==init?socketHandler(a,c):logger("udp:: WARNING: Discard incoming message",2)});userver.on("listening",function(){var a=userver.address();logger("UDP server listening to addr:port: "+a.address+":"+a.port,1)});
function connectDbase(a){connection.connect(function(c){c?(logger("ERROR:: Connecting to the MySQL Database, make sure database exists and permissions are OK",1),logger("connectDbase:: ERROR: "+c,0),a("connectDbase error","null")):(logger("Connected to the MySQL Database",1),a(null,"mysql connected"))})}
function queryDbase(a,c){connection.query(a,function(b,d,e){b?(console.log("queryDbase:: err: "+b+", query: <"+a+">"),c("queryDbase err: "+b,null)):(3<=debug&&console.log("queryDbase:: is: \n",d),c(null,d))})}function insertDb(a,c,b){var d=connection.query("INSERT INTO "+a+" SET ?",c,function(a,c){a?(console.log("insertDb:: err: "+a+", query ",d.sql),b("Error: "+a,null)):(3<=debug&&console.log("insertDb success:: result: \n",c),b(null,c))})}
function updateDb(a,c,b){var d=connection.query("UPDATE "+a+" SET ? WHERE id=?",[c,c.id],function(a,c){a?(console.log("updateDb:: err: "+a+", query ",d.sql),b(a,c)):(3<=debug&&console.log("updateDb success:: result: \n",c),b(null,c))})}function deleteDb(a,c,b){var d=connection.query("DELETE FROM "+a+" WHERE id=?",c.id,function(a,c){a?(console.log("deleteDb:: err: "+a+", query ",d.sql),b(a,c)):(3<=debug&&console.log("deleteDb success:: result: \n",c),b(null,c))})}
function delDevDb(a,c,b){var d=connection.query("DELETE FROM "+a+" WHERE id=? and room=?",[c.id,c.room],function(a,c){a?(console.log("delDevDb:: err: "+a+", query ",d.sql),b(a,c)):(3<=debug&&console.log("deleteDb success:: result: \n",c),b(null,c))})}
function updDevDb(a,c,b){var d=connection.query("UPDATE "+a+" SET ? WHERE id=? AND room=?",[c,c.id,c.room],function(a,c){a?(console.log("updDevDb:: err: "+a+", query ",d.sql),b(a,c)):(3<=debug&&console.log("updDevDb success:: result: \n",c),b(null,c))})}
function createDbase(a){async.series([function(a){queryDbase("CREATE TABLE IF NOT EXISTS users(id INT, descr CHAR(128), type CHAR(32), name CHAR(20), login CHAR(20), passw CHAR(32), class INT )",function(b,d){var e=[];b?a(b,null):queryDbase("SELECT * FROM users",function(b,d,h){if(b)a(b,null);else if(0==d.length){for(d=0;d<config.users.length;d++)insertDb("users",config.users[d],function(a){e.push("u")});a(b,"uers made, sizeof users is:  "+config.users.length)}else logger("createDbase:: WARNING: There are already users in the user table",
1),a(b,"existing users")})})},function(a){queryDbase("DROP TABLE IF EXISTS rooms",function(b,d){queryDbase("CREATE TABLE rooms(id INT, descr CHAR(128), name CHAR(20) )",function(b,d){a(null,"rooms made")})})},function(a){queryDbase("DROP TABLE IF EXISTS devices",function(b,d){queryDbase("CREATE TABLE devices(id CHAR(3), descr CHAR(128), uaddr CHAR(3), gaddr CHAR(12), room CHAR(12), name CHAR(20), type CHAR(32), val INT, lastval INT, lastUpdate INT, brand CHAR(20) )",function(b,d){a(null,"devices made")})})},
function(a){queryDbase("DROP TABLE IF EXISTS scenes",function(b,d){queryDbase("CREATE TABLE scenes(id INT, descr CHAR(128), val INT, name CHAR(20), type CHAR(32), seq CHAR(255) )",function(b,d){a(null,"scenes made")})})},function(a){queryDbase("DROP TABLE IF EXISTS timers",function(b,d){queryDbase("CREATE TABLE timers(id INT, descr CHAR(128), name CHAR(20), type CHAR(32), scene CHAR(20), tstart CHAR(20), startd CHAR(20), endd CHAR(20), days CHAR(20), months CHAR(20), skip INT )",function(b,d){a(null,
"timers made")})})},function(a){queryDbase("DROP TABLE IF EXISTS handsets",function(b,d){queryDbase("CREATE TABLE handsets(id INT, descr CHAR(128), name CHAR(20), brand CHAR(20), addr CHAR(20), unit INT, val INT, type CHAR(20), scene CHAR(255) )",function(b,d){a(null,"handsets made")})})},function(a){queryDbase("DROP TABLE IF EXISTS settings",function(b,d){queryDbase("CREATE TABLE settings(id INT, descr CHAR(128), val CHAR(128), name CHAR(20), sett CHAR(255) )",function(b,d){a(null,"settings made")})})},
function(a){queryDbase("DROP TABLE IF EXISTS controllers",function(b,d){queryDbase("CREATE TABLE controllers(id INT, descr CHAR(128), name CHAR(20), fname CHAR(128) )",function(b,d){a(null,"controllers made")})})},function(a){queryDbase("DROP TABLE IF EXISTS brands",function(b,d){queryDbase("CREATE TABLE brands(id INT, descr CHAR(128), name CHAR(20), fname CHAR(128) )",function(b,d){a(null,"brands made")})})},function(a){queryDbase("DROP TABLE IF EXISTS sensors",function(b,d){queryDbase("CREATE TABLE sensors(id INT, descr CHAR(128), name CHAR(20), room CHAR(12), location CHAR(20), brand CHAR(20), address CHAR(20), channel CHAR(8), type CHAR(32), sensor CHAR(255) )",
function(b,d){a(null,"sensors made")})})},function(a){queryDbase("DROP TABLE IF EXISTS rules",function(b,d){queryDbase("CREATE TABLE rules(id INT, descr CHAR(128), name CHAR(20), type CHAR(32), active CHAR(1), jrule TEXT(65000), brule TEXT(65000) )",function(b,d){a(null,"rules made")})})},function(a){var b=[];logger("createDb starting for devices, #devices: "+config.devices.length,1);for(var d=0;d<config.devices.length;d++)insertDb("devices",config.devices[d],function(a,c){b.push("d")});a(null,"devices: "+
b)},function(a){for(var b=[],d=0;d<config.sensors.length;d++){var e=config.sensors[d];e.sensor=JSON.stringify(config.sensors[d].sensor);insertDb("sensors",e,function(a){b.push("w")})}a(null,"sensors: "+b)},function(a){var b=[];logger("createDb starting for rooms, #rooms: "+config.rooms.length,1);for(var d=0;d<config.rooms.length;d++)insertDb("rooms",config.rooms[d],function(a){b.push("r")});a(null,"fill rooms"+config.rooms.length)},function(a){for(var b=[],d=0;d<config.scenes.length;d++)insertDb("scenes",
config.scenes[d],function(a){b.push("s")});a(null,"scenes: "+b)},function(a){for(var b=[],d=0;d<config.timers.length;d++)insertDb("timers",config.timers[d],function(a){b.push("t")});a(null,"timers: "+b)},function(a){for(var b=[],d=0;d<config.handsets.length;d++)insertDb("handsets",config.handsets[d],function(a){b.push("h")});a(null,"handsets: "+b)},function(a){for(var b=[],d=0;d<config.settings.length;d++)config.settings[d].sett=JSON.stringify(config.settings[d].sett),insertDb("settings",config.settings[d],
function(a){b.push("x")});a(null,"settings: "+b)},function(a){for(var b=[],d=0;d<config.controllers.length;d++)insertDb("controllers",config.controllers[d],function(a){b.push("c")});a(null,"controllers: "+b)},function(a){for(var b=[],d=0;d<config.brands.length;d++)insertDb("brands",config.brands[d],function(a){b.push("b")});a(null,"brands: "+b)},function(a){for(var b=[],d=0;d<config.rules.length;d++){var e=config.rules[d];e.jrule=JSON.stringify(config.rules[d].jrule);e.brule=JSON.stringify(config.rules[d].brule);
insertDb("rules",e,function(a){b.push("s")})}a(null,"rules: "+b)}],function(c,b){c?(logger("createDbase:: ERROR: "+c,0),a(c,b)):(logger("createDbase:: Databases created, result: ",1),console.log(b),a(null,b))})}
function loadDbase(a){async.series([function(a){queryDbase("SELECT * from devices",function(b,d){if(b)logger("loadDbase:: ERROR reading devices table, "+b,1),a("loadDbase ERROR reading devices",null);else{config.devices=d;for(var e=0;e<config.devices.length;e++)"868"==config.devices[e].gaddr&&(lampi_admin[config.devices[e].uaddr]={val:config.devices[e].val,checks:3});a(null,"devices "+d.length)}})},function(a){queryDbase("SELECT * from sensors",function(b,d){if(null===d)logger("loadDbase:: select sensors returns 0",
1),a("loadDbase sensors error",null);else{config.sensors=d;for(var e=0;e<d.length;e++)d[e].sensor=JSON.parse(d[e].sensor);a(null,"sensors "+d.length)}})},function(a){queryDbase("SELECT * from rooms",function(b,d){config.rooms=d;a(null,"rooms "+d.length)})},function(a){queryDbase("SELECT * from scenes",function(b,d){config.scenes=d;a(null,"scenes "+d.length)})},function(a){queryDbase("SELECT * from timers",function(b,d){config.timers=d;a(null,"timers "+d.length)})},function(a){queryDbase("SELECT * from settings",
function(b,d){config.settings=d;for(var e=0;e<d.length;e++)d[e].sett=JSON.parse(d[e].sett);a(null,"settings "+d.length)})},function(a){queryDbase("SELECT * from brands",function(b,d){config.brands=d;a(null,"brands "+d.length)})},function(a){queryDbase("SELECT * from handsets",function(b,d){config.handsets=d;a(null,"handsets "+d.length)})},function(a){queryDbase("SELECT * from rules",function(b,d){if(null===d)logger("loadDbase:: ERROR select rules returns 0",0),a("loadDbase rules error",null);else{for(var e=
0;e<d.length;e++){try{d[e].jrule=JSON.parse(d[e].jrule)}catch(f){logger("JSON ERROR parsing jrule",0),console.log(f),a("loadDbase jrule error",null)}try{d[e].brule=JSON.parse(d[e].brule)}catch(f){logger("JSON ERROR parsing brule",0),console.log(f),a("loadDbase brule error",null)}}config.rules=d;a(null,"rules "+d.length)}})},function(a){queryDbase("SELECT * from controllers",function(b,d){config.controllers=d;a(null,"controllers "+d.length)})}],function(c,b){a(null,b)})}
function deviceSet(a,c){var b=config.devices[a].uaddr,d=config.devices[a].type,e=Math.floor(99*c/32),f={host:par.zHost,path:"",port:"8083",method:"GET",headers:{"Content-Type":"application/json"}};callSet=function(a){a.on("data",function(a){logger("WARNING deviceSet received data: "+a,3)});a.on("end",function(){logger("deviceSet has ended",2)});a.on("error",function(){logger("deviceSet ERROR Updating dev: "+b+"",0)})};logger("deviceSet:: setting zdev: "+b+" to "+c,1);switch(d){case "dimmer":f.path=
"/ZWaveAPI/Run/devices["+b+"].instances[0].commandClasses[38].Set("+e+")";break;case "switch":f.path="/ZWaveAPI/Run/devices["+b+"].instances[0].commandClasses[37].Set("+e+")";break;case "thermostat":f.path="/ZWaveAPI/Run/devices["+b+"].instances[0].commandClasses[67].ThermostatSetPoint.Set(1,"+e+")";break;default:logger("deviceSet:: ERROR Unknown type "+d,0)}d=http.request(f,callSet);d.on("error",function(a){logger("deviceSet:: ERROR making connection to zwave host, "+a.message,0)});d.end()}
function deviceGet(a,c){var b=config.devices[a].uaddr,d=config.devices[a].val,e=lampi_admin[b].val,f,g=http.request({host:par.zHost,path:"/ZWaveAPI/Run/devices["+b+"].Basic.Get()",port:"8083",method:"GET",headers:{"Content-Type":"application/json"}},function(g){g.on("data",function(a){logger("ERROR deviceGet received data: "+a,3)});g.on("end",function(){if(void 0==devices[b])logger("deviceGet:: Device "+b+" not read yet from ZWave",2);else{logger("deviceGet:: device: "+b+", lampi dev index: "+a,2);
switch(c){case "switch":if(0==devices[b].instances[0].commandClasses[37].data.interviewDone.value){console.log("ERROR:: Switch device "+b+" Dead");return}f=devices[b].instances[0].commandClasses[37].data.level.value+0;break;case "dimmer":if(!1===devices[b].instances[0].commandClasses[38].data.interviewDone.value){console.log("ERROR:: Dimmer device "+b+" Dead");return}f=Math.ceil(devices[b].instances[0].commandClasses[38].data.level.value/99*32);break;case "thermostat":if(void 0==devices[b].instances[0].commandClasses[67]){logger("WARNING:: Thermostat device "+
b+" not defined",1);return}if(!1===devices[b].instances[0].commandClasses[67].data.interviewDone.value){logger("ERROR:: Thermostat device "+b+" Dead",2);return}f=devices[b].instances[0].commandClasses[67].data[1].val.value;return;default:logger("ERROR:: lampi type not supported: "+c,0);return}logger("Dev: "+b+", lVal: "+d+", aVal: "+e+", zVal: "+f,2);if(f==d&&e==d)logger("X X X, all values of device "+b+" are equal",3);else if(f==d&&e!=d)logger("Y X Y, updating device "+b+" to zVal: "+f,1),lampi_admin[b].val=
f;else if(d!=f&&e==f){logger("Y X X, The gui valui of "+b+" has changed",1);config.devices[a].val=d;updDevDb("devices",config.devices[a],function(a){logger("deviceGet:: store_device "+b+" finished OK",1)});var g="!R"+config.devices[a].room+"D"+b+"F",g=0==d?g+"0":g+"dP"+d,g={tcnt:""+tcnt++,type:"raw",action:"gui",cmd:"zwave",gaddr:"868",uaddr:""+b,val:""+d,message:g};logger("deviceGet:: to icsHandler: "+JSON.stringify(g),1);icsHandler(g,null)}else if(f!=d&&e==d){logger("X X Y, Z-Wave changed; Update lampi gui for device "+
b+" to value "+f,1);g={tcnt:""+tcnt++,type:"raw",action:"gui",cmd:"zwave",gaddr:"868",uaddr:""+b,val:""+f,message:"!R"+config.devices[a].room+"D"+b+"F"+f};switch(c){case "switch":g.message="!R"+config.devices[a].room+"D"+b+"F"+f;break;case "dimmer":g.message="!R"+config.devices[a].room+"D"+b+"FdP"+f;break;default:logger("No Manual Update Action defined")}logger("Sending data to icsHandler: "+JSON.stringify(g),1);icsHandler(g,null);logger("Updated device to "+f+", cmd string: "+g.message,1)}else logger("Y X Z, reset admin for device "+
b+" to lampi defined value "+d,1),lampi_admin[b].val=d}});g.on("error",function(){logger("deviceGet:: ERROR Updating dev: "+b+"",1)});g.on("timeout",function(){logger("deviceGet:: TIMEOUT");g.abort()});g.setTimeout(5E3)});g.on("error",function(a){logger("deviceGet:: ERROR opening connection to zwave host, "+a.message,1)});g.end()}function getTime(){var a=new Date;return S(a.getHours()).padLeft(2,"0").s+":"+S(a.getMinutes()).padLeft(2,"0").s+":"+S(a.getSeconds()).padLeft(2,"0").s}
function getTicks(){return Math.floor(Date.now()/1E3)}function getSunRise(){var a=SunCalc.getTimes(new Date,51.5,-.1);return Math.floor(a.sunrise.getTime()/1E3)}function getSunSet(){var a=SunCalc.getTimes(new Date,51.5,-.1);return Math.floor(a.sunset.getTime()/1E3)}
function printTime(a){a=new Date(1E3*a);return("00"+(a.getMonth()+1)).slice(-2)+"/"+("00"+a.getDate()).slice(-2)+"/"+a.getFullYear()+" "+S(a.getHours()).padLeft(2,"0").s+":"+S(a.getMinutes()).padLeft(2,"0").s+":"+S(a.getSeconds()).padLeft(2,"0").s}function findHandset(a,c,b){var d=config.handsets;logger("findHandset:: length: "+d.length+", addr: "+a+", unit: "+c,2);var e;for(e=0;e<d.length&&(d[e].addr!=a||d[e].unit!=c||d[e].val!=b);e++);return e<d.length?e:-1}
function findDevice(a,c){var b=config.devices;logger("findDevice:: length: "+b.length+", room: "+a+", uaddr: "+c,2);var d;for(d=0;d<b.length&&(b[d].room!=a||b[d].uaddr!=c);d++);return d<b.length?d:-1}function idDevice(a,c){logger("idDevice:: length: "+config.devices.length+", room: "+a+", id: "+c,2);var b;for(b=0;b<config.devices.length&&(config.devices[b].room!=a||config.devices[b].id!=c);b++);return b<config.devices.length?b:-1}
function gaddrDevice(a,c){logger("gaddrDevice:: length: "+config.devices.length+", gaddr: "+a+", uaddr: "+c,2);var b;for(b=0;b<config.devices.length&&(config.devices[b].gaddr!=a||config.devices[b].uaddr!=c);b++);return b<config.devices.length?b:-1}function findScene(a){var c;for(c=0;c<config.scenes.length&&config.scenes[c].name!=a;c++);return c<config.scenes.length?c:-1}function idRoom(a){var c;for(c=0;c<config.rooms.length;c++)if(config.rooms[c].id==a)return c;return-1}
function addrSensor(a,c){logger("addrSensor:: address: "+a+", channel: "+c,2);if(void 0==config.sensors)return-1;var b;for(b=0;b<config.sensors.length&&(config.sensors[b].address!=a||config.sensors[b].channel!=c);b++);return b<config.sensors.length?b:-1}function delFromArray(a,c){var b;for(b=0;b<a.length&&a[b].id!=c.id;b++);a.splice(b,1)}function updInArray(a,c){var b;for(b=0;b<a.length;b++)if(a[b].id==c.id){a[b]=c;break}}
function iArray(a,c){var b;for(b=0;b<a.length;b++)if(a[b].id==c.id)return b;return-1}
function allOff(a,c){for(var b=[],d=[],e=0;e<config.devices.length;e++)if(config.devices[e].room==a&&"thermostat"!=config.devices[e].type){var f=config.devices[e].brand,f={tcnt:""+tcnt++,type:"raw",action:"gui",cmd:config.brands[f].fname,gaddr:""+config.devices[e].gaddr,uaddr:""+config.devices[e].uaddr,val:"0",message:"!R"+a+"D"+config.devices[e].uaddr+"F0"};d.push(JSON.stringify(f));b.push(function(a){setTimeout(function(){var b=d.shift();logger("allOff:: timeout str: "+b,2);socketHandler(b,c);a(null,
"yes")},2E3)});"868"==config.devices[e].gaddr&&deviceSet(e,"0")}async.series(b,function(a,b){a?logger("allOFF:: ERROR: "+a,0):logger("allOff:: OKE finished, results: "+b,2)})}function alarmHandler(a,c){logger("alarmHandler:: buf: "+a,1)}
function consoleHandler(a,c){logger("consoleHandler:: request: "+a,1);var b="";switch(a){case "logs":exec("tail -30 "+logDir+"/PI-node.log",function(d,e,h){b=null===d?b+(e.split("\n").join("<br>")+"<br><br>"+h):b+("<br>  CONSOLE ERROR:   "+d+"     <br>  "+h);d={tcnt:""+tcnt++,type:"raw",action:"console",request:a,message:b};c.send(JSON.stringify(d))});return;case "zlogs":break;case "zway-reset":zwave_reset(function(a,b){a?logger("consoleHandler:: ERROR unable to run zwave_reset, "+a,1):logger("consoleHandler:: zwave_reset: "+
b,1)});break;case "sunrisesunset":var d=SunCalc.getTimes(new Date,51.5,-.1),e=d.sunrise.getHours()+":"+("00"+d.sunrise.getMinutes()).slice(-2),d=d.sunset.getHours()+":"+("00"+d.sunset.getMinutes()).slice(-2),b="<br>Sunrise: "+e+" Hrs<br>Sunset: "+d+" Hrs<br>";break;case "clients":logger("Active socket Clients:: ",1);b="<br>";clients.forEach(function(a){b+=a.name+" : "+a.type+"    <br>"});break;case "rebootdaemon":b="<br>Rebooting Node Daemon Now<br><br>this will take a minute<br>";setTimeout(function(){exec("nohup "+
par.homeDir+"/scripts/PI-node -r &",function(a,b,c){})},2E3);break;case "printConfig":b=printConfig();break;default:logger("consoleHandler:: Unknown request: "+a,0),b="Unknown request<br>"}e={tcnt:""+tcnt++,type:"raw",action:"console",request:a,message:b};c.send(JSON.stringify(e))}
function dbaseHandler(a,c,b){logger("dbaseHandler:: cmd: "+a,1);2<=debug&&(logger("dbaseHandler:: cmd: "+a+", args: ",2),console.log(c));switch(a){case "add_room":insertDb("rooms",c,function(a){logger("add_room finished OK "+a,1)});config.rooms.push(c);break;case "delete_room":deleteDb("rooms",c,function(a){logger("delete_room finished OK "+a,1)});delFromArray(config.rooms,c);break;case "add_scene":insertDb("scenes",c,function(a){logger("add_scene finished OK "+a,1)});config.scenes.push(c);break;
case "delete_scene":deleteDb("scenes",c,function(a){logger("delete_scenes finished OK "+a,1)});delFromArray(config.scenes,c);break;case "store_scene":updateDb("scenes",c,function(a){logger("store_scenes finished OK "+a,1)});updInArray(config.scenes,c);break;case "add_timer":insertDb("timers",c,function(a){logger("add_timer finished OK "+a,1)});config.timers.push(c);break;case "delete_timer":deleteDb("timers",c,function(a){logger("delete_timers finished OK "+a,1)});delFromArray(config.timers,c);break;
case "store_timer":updateDb("timers",c,function(a){logger("store_timers finished OK "+a,1)});updInArray(config.timers,c);break;case "add_handset":insertDb("handsets",c,function(a){logger("add_handset finished OK "+a,1)});config.handsets.push(c);break;case "delete_handset":deleteDb("handsets",c,function(a){logger("delete_handsets finished OK "+a,1)});delFromArray(config.handsets,c);break;case "list_user":var d={};3<=b.trusted?connection.query("Select * FROM users",function(a,c,g){a?logger("list_user:: ERROR: "+
a):(d={tcnt:tcnt++,type:"raw",action:"list_user",message:c},logger("list_user returning: "+d),b.send(JSON.stringify(d),function(a){void 0!==a&&(logger("list_user:: ERROR sending user data "+a,1),logger("list_user:: Socket: "+b.name+", type: "+b.type,1))}))}):(d={tcnt:tcnt++,type:"raw",action:"login",message:"Please login with a user that has a higher trustlevel"},b.send(JSON.stringify(d),function(a){void 0!==a&&(logger("list_user:: ERROR responding load database "+a,1),logger("list_user:: Socket: "+
b.name+", type: "+b.type,1))}),logger("list_user:: trust level socket "+b.name+" insufficient: "+b.trusted));break;case "add_user":insertDb("users",c,function(a){logger("add_user finished OK "+a,1)});config.users.push(c);break;case "delete_user":deleteDb("users",c,function(a){logger("delete_user finished OK "+a,1)}),delFromArray(config.users,c);case "store_user":updateDb("users",c,function(a){logger("store_user finished OK "+a,1)});updInArray(config.users,c);break;case "add_sensor":insertDb("sensors",
c,function(a){logger("add_sensor finished OK "+a,1)});config.sensors.push(c);break;case "delete_sensor":deleteDb("sensors",c,function(a){logger("delete_sensor finished OK "+a,1)});delFromArray(config.sensors,c);break;case "add_rule":config.rules.push(c);c={name:c.name,id:c.id,type:"rule",descr:c.descr,jrule:JSON.stringify(c.jrule),brule:JSON.stringify(c.brule)};insertDb("rules",c,function(a){logger("add_rule finished OK "+a,1)});break;case "store_rule":updInArray(config.rules,c);c={name:c.name,type:"rule",
id:c.id,active:c.active,descr:c.descr,jrule:JSON.stringify(c.jrule),brule:JSON.stringify(c.brule)};updateDb("rules",c,function(a){logger("store_rule finished OK "+a,1)});break;case "delete_rule":deleteDb("rules",c,function(a){logger("delete_rule finished OK "+a,1)});delFromArray(config.rules,c);break;case "store_setting":"debug"==c.name&&(debug=Number(c.val));"alarm"==c.name&&(3<=b.trusted?woonveilig.wvSet(c.val,function(a,b){logger("Alarm set to: "+b)},1):(d={tcnt:tcnt++,type:"raw",action:"login",
message:"Alarm can only be set with a user that has a higher trustlevel"},b.send(JSON.stringify(d),function(a){void 0!==a&&(logger("store_setting:: ERROR sending login request "+a,1),logger("store_setting:: Socket: "+b.name+", type: "+b.type,1))}),a=iArray(config.settings,c),c.val=config.settings[a].val,logger("store_setting:: trust of "+b.name+" too low: "+b.trusted+"to change "+config.settings[a].name,1)));updInArray(config.settings,c);c={descr:c.descr,id:c.id,val:c.val,name:c.name,sett:JSON.stringify(c.sett)};
updateDb("settings",c,function(a){logger("store_setting finished OK "+a,1);a={};a.settings=config.settings;a={tcnt:tcnt++,type:"json",action:"upd_config",message:a};b.send(JSON.stringify(a),function(a){void 0!==a&&(logger("store_setting:: ERROR sending settings "+a,1),logger("store_setting:: Socket: "+b.name+", type: "+b.type,1))})});break;case "add_device":insertDb("devices",c,function(a){logger("add_device finished OK",1)});config.devices.push(c);break;case "delete_device":delDevDb("devices",c,
function(a){logger("delete_device finished OK",1)});a=idDevice(c.room,c.id);-1!=a?config.devices.splice(a,1):logger("dbaseHandler:: delete_device failed for index: "+a+", room: "+c.room+", id: "+c.id);break;case "store_device":updDevDb("devices",c,function(a){logger("store_device finished OK",1)});a=idDevice(c.room,c.id);-1!=a?config.devices[a]=c:logger("dbaseHandler:: store_device failed for index: "+a);break;case "backup_db":break;case "restore_db":break;default:logger("dbaseHandler:: Unknown command: "+
a,1)}}
function createEnergyDb(a,c,b){var d=[];logger("createEnergyDb:: ",1);d+=void 0!==c.kw_hi_use?"DS:kw_hi_use:COUNTER:600:0:999999999 ":"";d+=void 0!==c.kw_lo_use?"DS:kw_lo_use:COUNTER:600:0:999999999 ":"";d+=void 0!==c.kw_hi_ret?"DS:kw_hi_ret:COUNTER:600:0:999999999 ":"";d+=void 0!==c.kw_lo_ret?"DS:kw_lo_ret:COUNTER:600:0:999999999 ":"";d+=void 0!==c.gas_use?"DS:gas_use:COUNTER:600:0:999999999 ":"";d+=void 0!==c.kw_act_use?"DS:kw_act_use:GAUGE:600:0:999999 ":"";d+=void 0!==c.kw_act_ret?"DS:kw_act_ret:GAUGE:600:0:999999 ":"";
d+=void 0!==c.kw_ph1_use?"DS:kw_ph1_use:GAUGE:600:0:999999 ":"";d+=void 0!==c.kw_ph2_use?"DS:kw_ph2_use:GAUGE:600:0:999999 ":"";d+=void 0!==c.kw_ph3_use?"DS:kw_ph3_use:GAUGE:600:0:999999 ":"";d+="RRA:AVERAGE:0.5:1:360 RRA:AVERAGE:0.5:30:288 ";d+="RRA:AVERAGE:0.5:90:672 ";d+="RRA:AVERAGE:0.5:360:744 ";d+="RRA:AVERAGE:0.5:216:1460 ";d+="RRA:MIN:0.5:90:672 ";d+="RRA:MAX:0.5:90:672 ";a="rrdtool create "+a+" --step 20 "+d;logger("createEnergyDb:: execStr: "+a,1);exec(a,function(a,d,g){null===a?(logger("createEnergyDb:: ok, stdout: "+
d+"; stderr: "+g,2),energyHandler(c,b)):logger("createEnergyDb:: ERROR: "+a+"; stderr: "+g)})}
function energyHandler(a,c){var b=rrdDir+"/db/e350.rrd",d=[],e=addrSensor(a.address,a.channel);if(0>e)logger("energyHandler:: ERROR index for energy: "+a.address+":"+a.channel,1);else{logger("energyHandler index: "+e+" name: "+config.sensors[e].name,2);var f=config.sensors[e].name;Object.keys(config.sensors[e].sensor).forEach(function(b){a.hasOwnProperty(b)?(logger("energyHandler:: found: "+b+" in config",2),config.sensors[e].sensor[b].val=a[b],config.sensors[e].sensor[b].lastUpdate=getTicks()):logger("energyHandler:: ERROR: "+
b+" not found in buffer",1)});logger("energyHandler:: action: "+a.action+", brand: "+a.brand+", name: "+f,1);fs.existsSync(b)||(logger("energyHandler:: rrdtool db "+b+" does not exist ... creating",1),createEnergyDb(b,a));d+=":"+Math.floor(1E3*Number(a.kw_hi_use));d+=":"+Math.floor(1E3*Number(a.kw_lo_use));d+=":"+Math.floor(1E3*Number(a.kw_hi_ret));d+=":"+Math.floor(1E3*Number(a.kw_lo_ret));d+=":"+Math.floor(1E3*Number(a.gas_use));d+=":"+Math.floor(1E3*Number(a.kw_act_use));d+=":"+Math.floor(1E3*
Number(a.kw_act_ret));d+=":"+Math.floor(1E3*Number(a.kw_ph1_use));d+=":"+Math.floor(1E3*Number(a.kw_ph2_use));d+=":"+Math.floor(1E3*Number(a.kw_ph3_use));b="rrdtool update "+b+" N"+d;logger("energyHandler:: execStr: "+b,2);exec(b,function(a,b,c){null===a?logger("energyHandler:: stdout: "+b+"; stderr: "+c,2):logger("energyHandler:: ERROR: "+a+"; stderr: "+c)});broadcast(JSON.stringify(a),c,"raw")}}
function graphHandler(a,c){var b=a.gcmd,d=a.gtype,e=a.gperiod,f=a.gsensors,g,h,k,l,n=par.homeDir+"/rrd/db/",p=par.homeDir+"/www/graphs/",m="e350.rrd",t="ff0000 111111 00ff00 0000ff ff00ff 666666 00ffff ff3399 ffff00".split(" ");logger("graphHandler:: Starting for "+b+":"+d+":"+e+":"+f);void 0==f&&(logger("graphHandler:: No sensors defined",1),f=[]);switch(b){case "energy":switch(d){case "E_GAS":k=sensorType="gas_use";l="M3";break;case "E_ACT":sensorType="pwr act";k="pwr_act";l="kWhr";break;case "E_USE":sensorType=
"pwr use";k="pwr_use";l="kWhr";break;case "E_PHA":sensorType="phase use",k="pwr_pha",l="kWhr"}break;case "weather":case "sensors":switch(d){case "T":sensorType="temperature";k="all_temp";l="C";break;case "H":sensorType="humidity";k="all_humi";l=" %%";break;case "P":sensorType="airpressure";k="all_press";l="hPa";break;case "L":sensorType="luminescense";k="all_lumi";l="Lux";break;case "B":sensorType="battery",k="all_battery",l=" %%"}}switch(e){case "1h":g="";break;case "1d":g="";break;case "1w":g=":step=3600";
break;case "1m":g=":step=8640";break;case "1y":g=":step=21300";break;default:logger("graphHandler:: ERROR unknown period: "+e,1)}for(var x=d="",u="",q=0;q<f.length;q++)h=q+1==f.length?"\\n":"","energy"==b?(m="e350.rrd",d+="DEF:t"+(q+1)+"="+n+m+":"+f[q]+":AVERAGE"+g+" "):(m=f[q]+".rrd",d+="DEF:t"+(q+1)+"="+n+m+":"+sensorType+":AVERAGE "),x+="LINE2:t"+(q+1)+"#"+t[q%t.length]+':"'+f[q]+h+'" ',u+="GPRINT:t"+(q+1)+':LAST:"'+f[q]+" %3.0lf "+l+h+'" ';b="/usr/bin/rrdtool graph "+p+k+"_"+e+".png"+(" -s N-"+
e+' -a PNG -E --title="'+sensorType+' readings" ');b+='--vertical-label "'+sensorType+'" --width 750 --height 500 ';b+=d;b+=x;b+=u;logger("graphHandler:: \n"+b,2);exec(b,function(b,d,e){null===b?(logger("graphHandler:: ok, stdout: "+d+"; stderr: "+e,2),broadcast(JSON.stringify(a),c,"raw")):logger("graphHandler:: ERROR: "+b+"; stderr: "+e)})}
function guiHandler(a,c){logger("guiHandler:: buf: "+a,1);var b=gaddrDevice(a.gaddr,uaddr);"868"==config.devices[b].gaddr&&deviceSet(b,a.val);b={tcnt:""+tcnt++,type:"json",action:"gui",cmd:a.cmd,gaddr:""+a.gaddr,uaddr:""+a.uaddr,val:""+a.val,message:a.ics};logger("guiHandler:: to broadcast: "+JSON.stringify(b),2);broadcast(JSON.stringify(b),c)}
function icsHandler(a,c){var b=a.message,d=/\d+/;switch(b.substr(0,2)){case "!R":var e="",f=b.match(d);if(-1!=b.indexOf("Fa")){allOff(f,c);break}var g=b.indexOf("D"),h=b.substr(g+1,2).match(d);logger("icsHandler:: uaddr: "+h,2);g=b.indexOf("FdP");-1!=g?(e=d=Number(b.substr(g+3,2).match(d)),logger("icsHandler:: Found dimmer value: "+d,2)):(g=b.indexOf("F"),d=b.substr(g+1,2).match(d),0==d&&(e="off"),1==d&&(e="on"),logger("icsHandler:: Found switch value: "+d,2));g=findDevice(f,h);if(0>g||g>config.devices.length){logger("icsHandler:: ERROR for index: "+
g+", #devices: "+config.devices.length+" room: "+f+", uaddr: "+h+", ics: "+b,1);break}var k=config.devices[g].gaddr,l=config.brands[config.devices[g].brand].fname,e={tcnt:""+tcnt++,type:"raw",action:"gui",cmd:l,gaddr:""+k,uaddr:""+h,val:""+e,message:b};config.devices[g].val=d;config.devices[g].lastUpdate=getTicks();logger("icsHandler:: Room: "+f+", Dev: "+h+", Val: "+d,0);"868"==k&&deviceSet(g,d);updDevDb("devices",config.devices[g],function(a){logger("icsHandler:: updDevDb ics "+b+" finished OK",
1)});logger("icsHandler:: to broadcast: "+JSON.stringify(e),2);broadcast(JSON.stringify(e),c);break;case "!F":logger("icsHandler:: !F Scene handler",1);queue.qinsert({ticks:getTicks(),scene:"gui",seq:"!R1D1FdP10,00:00:01"});break;case "!T":logger("icsHandler:: Timer command");queue.qinsert({ticks:getTicks(),scene:"gui",seq:"!R1D1F0"});break;case "!A":f=b.match(d);g=b.indexOf("D");h=b.substr(g+1,2).match(d);g=b.indexOf("F");e=b.substr(g+1,2).match(d);logger("icsHandler:: Handset addr: "+f+",unit: "+
h+", val: "+e+", sender: "+c.name,0);e=findHandset(f,h,e);if(0<=e)switch(e=config.handsets[e],e.type){case "handset":case "scene":queueScene({id:null,val:0,name:null,type:"scene",seq:e.scene});break;default:logger("icsHandler:: handset type not recognized: "+e.type,1)}else logger("icsHandler:: Handset "+f+" not found",1);break;case "!Q":logger("icsHandler:: All Off Q command",1);break;default:logger("icsHandler:: Unknown command ics code: <"+b+">",1)}}
function loginHandler(a,c){var b=a.login.toLowerCase();logger("loginHandler:: login: "+b,1);var d=connection.query("SELECT * FROM users WHERE login=?",[b],function(b,f,g){b?console.log("queryDbase:: err: "+b+", query: <"+d.sql+">"):(1<=debug&&console.log("loginHandler:: returns: \n",f),0==f.length?(logger("loginHandler:: ERROR not results for user "+a.login,1),a.action="login",0==init&&socketHandler(JSON.stringify(a),c)):1<f.length?logger("loginHandler:: ERROR returning "+f.length+" values",1):f[0].passw==
a.password?(logger("loginHandler:: checked user name: "+f[0].name,1),0==c.trusted?(b={tcnt:tcnt++,type:"json",action:"load_database",cmd:"",response:config},c.send(JSON.stringify(b),function(a){void 0!==a&&(logger("loginHandler:: ERROR responding load database "+a,0),logger("loginHandler:: Socket: "+c.name+", type: "+c.type,1))})):c.send(JSON.stringify({tcnt:a.tcnt,type:"raw",action:"alert",message:"Login Success<br>Depending on your trustlevel services will be enabled"}),c),c.trusted=f[0]["class"]):
(logger("loginHandler:: ERROR wrong password ",1),a.action="login",a.message="Wrong Password",c.send(JSON.stringify(a))))})}
function sensorHandler(a,c){var b=addrSensor(a.address,a.channel);if(0>b)logger("sensorHandler:: ERROR unknown index for sensor: "+a.address+":"+a.channel,0);else{logger("sensorHandler index: "+b+" name: "+config.sensors[b].name,2);var d=void 0!==c&&null!==c?c.name:"datagram",e=config.sensors[b].name,f=rrdDir+"/db/"+e+".rrd",d;if(fs.existsSync(f)){var g=[];Object.keys(config.sensors[b].sensor).forEach(function(c){a.hasOwnProperty(c)?(logger("sensorHandler:: update: "+c+" to: "+a[c]+", index: "+b+
", from: "+d+", name: "+e+", addr: "+a.address+", chan: "+a.channel,2),config.sensors[b].sensor[c].val=a[c],config.sensors[b].sensor[c].lastUpdate=getTicks()):logger("sensorHandler:: WARNING sensor: "+c+" not found, index: "+b+", from: "+d+", name: "+e+", addr: "+a.address+", chan: "+a.channel,2);g+=":"+Number(config.sensors[b].sensor[c].val)});f="rrdtool update "+f+" N"+g;logger("sensorHandler:: execStr: "+f,2);exec(f,function(b,c,d){null===b?logger("sensorHandler:: stdout: "+c+"; stderr: "+d,2):
(logger("sensorHandler:: ERROR: for rrd str: "+g+"\n Rrd Error: "+b+"; stderr: "+d,0),console.log("sensorHandler:: string: ",a))});broadcast(JSON.stringify(a),c,"raw")}else logger("sensorHandler:: rrdtool db "+f+" does not exist ... creating",1),createSensorDb(f,b,a,c)}}
function createSensorDb(a,c,b,d){var e=[];logger("createSensorDb:: ",1);Object.keys(config.sensors[c].sensor).forEach(function(a){switch(a){case "temperature":e+="DS:temperature:GAUGE:600:-20:95 ";break;case "humidity":e+="DS:humidity:GAUGE:600:0:100 ";break;case "airpressure":e+="DS:airpressure:GAUGE:600:900:1100 ";break;case "altitude":e+="DS:altitude:GAUGE:600:-100:1200 ";break;case "windspeed":e+="DS:windspeed:GAUGE:600:0:200 ";break;case "winddirection":e+="DS:winddirection:GAUGE:600:0:359 ";
break;case "rainfall":e+="DS:rainfall:GAUGE:600:0:25 ";break;case "luminescense":e+="DS:luminescense:GAUGE:600:0:400 ";break;case "battery":e+="DS:battery:GAUGE:600:0:110 "}});e+="RRA:AVERAGE:0.5:1:480 ";e+="RRA:AVERAGE:0.5:5:672 ";e+="RRA:AVERAGE:0.5:20:744 ";e+="RRA:AVERAGE:0.5:480:365 ";e+="RRA:MIN:0.5:20:720 ";e+="RRA:MAX:0.5:20:720 ";e+="RRA:AVERAGE:0.5:20:720 ";a="rrdtool create "+a+" --step 180 "+e;logger("createSensorDb:: execStr: "+a,1);exec(a,function(a,c,e){null===a?(logger("createSensorDb:: ok, stdout: "+
c+"; stderr: "+e,2),sensorHandler(b,d)):logger("createSensorDb:: ERROR: "+a+"; stderr: "+e)})}function sceneHandler(a,c){switch(a.cmd){case "run_scene":var b=a.message;logger("sceneHandler:: run scene selected, scene: "+b.name,0);queueScene(b);break;case "cancel_scene":logger("sceneHandler:: cancel scene selected",1);break;default:logger("sceneHandler:: Command not recognized, "+a.cmd,1)}}
function settingHandler(a,c){switch(a.cmd){case "store_config":logger("settingHandler:: store_config database name selected: "+a.name,1);writeConfig(a.message);break;case "load_config":logger("settingHandler:: load_config database name selected: "+a.name,1);config=readConfig();break;case "list_config":var b=listConfigDir(),d={};logger("settingHandler:: list_config database name selected",1);d={tcnt:tcnt++,type:"raw",action:"list_config",cmd:"",list:b};logger("socketHandler:: Sending "+d.action+" message to socket: "+
c.name);c.send(JSON.stringify(d),function(a){void 0!==a&&(logger("settingHandler:: ERROR responding list config: "+a,1),logger("settingHandler:: Socket: "+c.name+", type: "+c.type,1))})}}
function socketHandler(a,c){var b=a+"",d=b.search(/\}{/);if(-1!=d){var e=b.substr(0,d+1),b=b.substr(d+1);logger("socketHandler:: string 1: "+e,2);logger("socketHandler:: string 2: "+b,2);socketHandler(e,c);socketHandler(b,c)}else{logger("socketHandler:: Starting with data: "+a,2);try{e=JSON.parse(b)}catch(f){logger("socketHandler:: JSON parse error: "+f,1);return}void 0==c&&(logger("socketHandler socket undefined. action: "+e.action,2),2<=debug&&console.log("data: ",b),c=null);logger("Handler:: Action: "+
e.action,2);switch(e.action){case "alarm":logger("socketHandler:: alarm received",1);break;case "console":consoleHandler(e.request,c);break;case "dbase":dbaseHandler(e.cmd,e.message,c);break;case "energy":energyHandler(e,c);break;case "graph":graphHandler(e,c);break;case "gui":"raw"==e.type&&icsHandler(e,c);"json"==e.type&&guiHandler(e,c);break;case "handset":"raw"==e.type&&icsHandler(e,c);"json"==e.type&&guiHandler(e,c);break;case "login":logger("socketHandler:: login message received");loginHandler(e,
c);break;case "load_database":logger("socketHandler:: load_database received",1);b={};0==c.trusted?(logger("socketHandler:: Socket is not trusted: "+c.name,1),b={tcnt:tcnt++,type:"raw",action:"login",message:"Please login first"}):(logger("socketHandler:: Socket is trusted: "+c.name,1),b={tcnt:tcnt++,type:"raw",action:"load_database",cmd:"",response:config});logger("socketHandler:: Sending "+b.action+" message to socket: "+c.name);c.send(JSON.stringify(b),function(a){void 0!==a&&(logger("socketHandler:: ERROR responding load database "+
a,1),logger("socketHandler:: Socket: "+c.name+", type: "+c.type,1))});break;case "ping":case "PING":logger("socketHandler:: ping received",2);b={tcnt:tcnt++,action:"ack",type:"raw",message:"OK"};"ws"==c.type&&c.send(JSON.stringify(b));break;case "scene":logger("socketHandler:: scene command received",2);sceneHandler(e,c);break;case "setting":logger("socketHandler:: setting received: "+e.cmd,2);settingHandler(e,c);break;case "user":logger("socketHandler:: user command received",1);break;case "weather":logger("socketHandler:: WARNING weather received, type: "+
e.type+", addr:chan: "+e.address+":"+e.channel,0),e.action="sensor";case "sensor":sensorHandler(e,c);break;default:logger("SocketHandler:: action not recognized: "+e.action,1)}}}function queueScene(a){a=a.seq.split(",");for(var c=0;c<a.length;c+=2){var b=a[c+1].split(":"),b=+(3600*b[0])+60*b[1]+b[2];logger("queueScene item: "+c/2+", sticks: "+b+", scene: "+a[c]+", time: "+a[c+1],1);queue.qinsert({ticks:Number(b)+getTicks(),name:"gui",seq:a[c]})}}
function queueDevice(a,c,b,d,e){d=b.split(":");d=+(3600*d[0])+60*d[1]+d[2];e="!R"+config.devices[a].room+config.devices[a].id+("dimmer"==config.devices[a].type?"FdP":"F")+c;logger("queueDevice:: item: "+e+", dev: "+config.devices[a].name+", val: "+c+", time: "+b,1);queue.qinsert({ticks:Number(d)+getTicks(),name:"gui",seq:e})}
var queue=new function(){this.qlist=[];this.qpush=function(a){a={ticks:getTicks(),name:a.name,seq:a.seq};this.qlist.push(a)};this.qinsert=function(a){var c;for(c=0;c<this.qlist.length&&!(this.qlist[c].ticks>a.ticks);c++);this.qlist.splice(c,0,a)};this.qpop=function(){var a,c=getTicks();for(a=0;a<this.qlist.length&&!(this.qlist[a].ticks>c);a++);return this.qlist.splice(0,a)};this.qprint=function(){var a=getTicks(),c=queue.qtim();if(null!=c)for(logger("print queue for ticks: "+a+", next runnable: "+
c+" secs",1),a=0;a<this.qlist.length;a++)console.log("\t\t",this.qlist[a])};this.qtim=function(){if(0==this.qlist.length)return null;var a=getTicks();return this.qlist[0].ticks-a}};
function queueHandler(){for(var a=queue.qpop();null!=a&&0<a.length;){2<=debug&&console.log("queueHandler:: pop task: ",a);for(var c=0;c<a.length;c++){var b;logger("queueHandler:: processing task: ",a[c].name,1);switch(a[c].name){case "gui":b=a[c].seq.split(",");for(var d=0;d<b.length;d+=2)var e={tcnt:""+tcnt++,type:"raw",action:"gui",cmd:"",gaddr:"",uaddr:"",val:"",message:b[d]};socketHandler(JSON.stringify(e));break;case "scene":logger("queueHandler:: scene found",1);case "rule":logger("queueHandler:: Executing rule: "+
a[c].seq.id+", "+a[c].seq.cmd,2);switch(a[c].seq.cmd){case "active":config.rules[a[c].seq.id].active=a[c].seq.val;break;default:logger("queueHandler:: rule command unrecognized: "+a[c].seq.cmd,1)}break;default:logger("queueHandler:: executing: "+a[c].name,1);b=findScene(a[c].name);b=config.scenes[b].seq.split(",");for(d=0;d<b.length;d+=2)e={tcnt:""+tcnt++,type:"raw",action:"gui",cmd:"",gaddr:"",uaddr:"",val:"",message:b[d]};socketHandler(JSON.stringify(e))}}a=queue.qpop()}2<=debug&&queue.qprint()}
function ruleHandler(){if(void 0==config.rules)logger("ruleHandler:: ERROR rules not defined",1);else{for(var a=0;a<config.rules.length;a++)if("Y"==config.rules[a].active){logger("ruleHandler:: rule "+config.rules[a].name+" is active",2);try{logger("ruleHandler:: eval "+config.rules[a].name,1);logger("ruleHandler:: "+config.rules[a].jrule,3);var c=eval(config.rules[a].jrule);logger("ruleHandler:: eval rule "+config.rules[a].name+" returned: "+c,3);"stopRule"==c&&(config.rules[a].active="N");c===parseInt(c,
10)&&(config.rules[a].active="N",queue.qinsert({ticks:Number(c)+getTicks(),name:"rule",seq:{id:a,cmd:"active",val:"Y"}}))}catch(b){logger("ruleHandler:: Error evaluating rule "+config.rules[a].name+", error: "+b,1)}}else logger("ruleHandler:: rule "+config.rules[a].name+" not active",3);logger("ruleHandler:: Ended",2)}}logger("MAIN part started",1);async.series([function(a){connectDbase(a)},function(a){zwave_init(function(c,b){a(null,b)})},function(a){loadDbase(a)}],function(a,c){main(a,c)});
function start_loops(){loops=[];logger("All Init functions done",1);alarm_loop();timer_loop();poll_loop();zwave_loop()}function main(a,c){1<=debug&&console.log("Return values: \n",c);userver.bind(udpPort);init||(logger("Starting Loops"),start_loops());logger("Starting Static Webserver");app.use(serveStatic(__dirname+"/www"));app.listen(webPort)}
function timer_loop(){logger("Starting timer_loop",1);var a=setInterval(function(){var a=new Date,b=Math.floor(a.getTime()/1E3);logger("----------- TIMER EXPIRED? ------------",1);queryDbase("SELECT * from timers",function(d,e){d?logger("timer_loop:: ERROR table timers not found, "+d,1):(config.timers=e,logger("timer_loop:: #timers: "+e.length,2),queryDbase("SELECT * from scenes",function(d,g){config.scenes=g;logger("timer_loop:: now   date: "+a,1);for(var h=SunCalc.getTimes(a,52.13,5.58),k=0;k<e.length;k++){var l=
e[k].tstart.split(":"),n=l[0],p=l[1],l=e[k].startd.split("/"),m=l[0],t=l[1],x=Number(l[2])+2E3,l=e[k].endd.split("/"),u=l[0],q=l[1],l=Number(l[2])+2E3,r,w,y,z,A,v;y=a.getDate();z=a.getMonth();A=a.getFullYear();switch(n){case "96":v=1800*-Number(p);r=h.sunrise.getHours();w=h.sunrise.getMinutes();break;case "97":v=1800*Number(p);r=h.sunrise.getHours();w=h.sunrise.getMinutes();break;case "98":v=1800*-Number(p);r=h.sunset.getHours();w=h.sunset.getMinutes();break;case "99":v=1800*Number(p);r=h.sunset.getHours();
w=h.sunset.getMinutes();break;default:v=0,r=n,w=p}r=Math.floor((new Date(A,z,y,r,w,0,0)).getTime()/1E3)+v;logger("Timer correction is: "+v,2);logger("timer_loop:: run   date: "+r,2);logger("timer_loop:: now   date: "+b,2);0<r-b&&logger("timer_loop:: name: "+e[k].name+", runnable in: "+(r-b)+" secs",1);if(b<r)logger("Timer not yet started ",2);else if(u=Math.floor((new Date(l,q-1,u,0,0,0,0)).getTime()/1E3),logger("timer_loop:: end date:   "+u,2),b>u)logger("Timer enddate reached: "+u,1);else if(n=
Math.floor((new Date(x,t-1,m,n,p,0,0)).getTime()/1E3),logger("timer_loop:: start date: "+n,2),b<n)logger("Timer before start date",1);else if(b-r>timer_interval/500+1)logger("Timer already started some time ago",2);else if(b-r>timer_interval/1E3)logger("Timer already started",2);else if("x"==e[k].months[Number(a.getMonth())-1])logger("Timer, this is a blackout month",1);else if("x"==e[k].days[Number(a.getDay())-1])logger("Timer, this is a blackout day",1);else for(logger("timer_loop:: Starting timer name: "+
e[k].name,1),n=0;n<config.scenes.length;n++)if(g[n].name==e[k].scene)for(p=g[n].seq.split(","),m=0;m<p.length;m+=2)logger("scene item: "+m/2+", val: "+p[m]+", time: "+p[m+1],1),t=p[m+1].split(":"),t=+(3600*t[0])+60*t[1]+t[2],logger("qinsert:: ticks: "+t+", name: "+g[n].name+", seq: "+p[m],1),queue.qinsert({ticks:Number(t)+getTicks(),name:"gui",seq:p[m]})}}))})},timer_interval);loops.push(a)}
function zwave_loop(){logger("Starting zwave_loop");var a=0,c=setInterval(function(){2<=debug&&(logger("----------- ACTIVE CLIENTS ------------",1),logger("Active socket Clients:: ",1),clients.forEach(function(a){console.log(a.type+" Client: "+a.name)}));logger("----------- ACTIVE ZWAVE DEVICES ------------",1);zwave_init(function(a,c){a?logger("zwave_loop:: ERROR unable to run zwave_init, "+a,1):logger("zwave_loop:: zwave_init: "+c,1)});Date.now();Object.keys(devices).forEach(function(a){if(1<a){logger("key: "+
a,1);var c=addrSensor(a,0);if(-1==c)logger("WARNING:: Zwave device NOT found in config: "+a+" ignored!",0);else{var e=devices[a].instances[0].commandClasses;2<debug&&console.log(e);Object.keys(e).forEach(function(f){switch(f){case "37":var g=e[f].data.level.value+0,h=e[f].data.level.updateTime,k=e[f].data.level.invalidateTime;logger("\tCl: "+f+" Switch           , val "+g+", upd: "+printTime(h)+", inval: "+printTime(k),2);break;case "38":g=e[f].data.level.value+0;h=e[f].data.level.updateTime;k=e[f].data.level.invalidateTime;
logger("\tCl: "+f+" Dimmer           , val "+g+", upd: "+printTime(h)+", inval: "+printTime(k),2);break;case "39":logger("\tCl: "+f+" Dimmer?          , val "+g,2);break;case "48":if(0==e[f].data.interviewDone.value){logger("WARNING:: Device "+f+" Dead",1);break}g=e[f].data[1].level.value+0;h=e[f].data[1].level.updateTime;logger("\tCl: "+f+" PIR              , val "+g+", upd: "+printTime(h),2);break;case "49":if(0==e[f].data.interviewDone.value){logger("WARNING:: Device "+f+" Dead",0);break}h={tcnt:""+
tcnt++,action:"sensor",type:"json",address:a+"",channel:"0"};1 in e[f].data&&(g=e[f].data[1].val.value+0,logger("\tCl: "+f+" Temp             , val "+g,1),config.sensors[c].sensor.temperature.val=g,config.sensors[c].sensor.temperature.lastUpdate=e[f].data[1].val.updateTime,h.temperature=g);3 in e[f].data&&(g=e[f].data[3].val.value+0,logger("\tCl: "+f+" Lumi             , val "+g,1),config.sensors[c].sensor.luminescense.val=g,config.sensors[c].sensor.luminescense.lastUpdate=e[f].data[3].val.updateTime,
h.luminescense=g);5 in e[f].data&&(g=e[f].data[5].val.value+0,logger("\tCl: "+f+" Humi             , val "+g,1),config.sensors[c].sensor.humidity.val=g,config.sensors[c].sensor.humidity.lastUpdate=e[f].data[5].val.updateTime,h.humidity=g);logger("zwave_loop:: starting sensor handler for device: "+a,2);sensorHandler(h);break;case "67":if(0==e[f].data.interviewDone.value){logger("WARNING: Thermostat device "+a+" Dead",0);break}g=e[f].data[1].val.value+0;logger("\tCl: "+f+" Thermostat       , val "+
g,1);break;case "112":logger("\tCl: "+f+" Configuration",2);break;case "128":g=e[f].data.last.value;h=e[f].data.last.updateTime;logger("\tCl: "+f+" Battery         , "+g+"%, upd: "+printTime(h),1);break;case "132":logger("\tCl: "+f+" Wakeup",2);break;case "133":logger("\tCl: "+f+" Association",2);break;case "142":logger("\tCl: "+f+" MultiCh Assoc",2);break;case "143":logger("\tCl: "+f+" MultiCh Assoc",2);break;case "156":logger("\tCl: "+f+" Alarm Sensor",1);break;default:logger("\tCl: "+f+" Device not yet handled",
2)}})}}});a++},log_interval);loops.push(c)}function poll_loop(){logger("Starting poll_loop");var a=setInterval(function(){logger("-----------       POLL      ------------",1);connection.query("SELECT * from devices",function(a,b,d){if(a)logger("poll_loop:: ERROR reading devices, "+a,1);else for(config.devices=b,3<=debug&&console.log("query devices:: is: \n",b),a=0;a<config.devices.length;a++)"868"==config.devices[a].gaddr&&deviceGet(a,config.devices[a].type)})},poll_interval);loops.push(a)}
function alarm_loop(){logger("Starting alarm_loop",1);var a=0,c=setInterval(function(){var b=Math.floor(Date.now()/1E3);logger("alarm_loop:: zTime: "+(b-alarm_interval),2);logger("----------- QUEUE HANDLER -------------",2);queueHandler();logger("----------- RULES HANDLER -------------",2);ruleHandler();void 0==devices||0==Object.getOwnPropertyNames(devices).length?logger("alarm_loop:: ERROR No devices found, or zwave gateway down",2):(zwave_upd_options.path="/ZWaveAPI/Data/"+(b-alarm_interval),b=
http.request(zwave_upd_options,zwave_upd_cb),b.on("error",function(a){logger("alarm_loop:: ERROR no connection to zwave host, "+a.message,1)}),b.end(),!0===devices[9].instances[0].commandClasses[48].data[1].level.value&&(console.log("Fibaro ALARM"),b={tcnt:868,type:"json",action:"alarm",scene:"Living on",message:"Fibaro ALARM"},0==a&&(a=1,broadcast(JSON.stringify(b),null),logger("FIBARO ALARM",0),setTimeout(function(){a=0},24E4))),!0===devices[11].instances[0].commandClasses[48].data[1].level.value&&
(b={tcnt:868,type:"json",action:"alarm",scene:"",message:"AEON ALARM"},0==a&&(a=1,broadcast(JSON.stringify(b),null),logger("AEON ALARM",0),setTimeout(function(){a=0},24E4))))},alarm_interval);loops.push(c)};