var debug=1,poll_interval=6E3,log_interval=12E4,alarm_interval=2E3,timer_interval=3E4,webPort=8080,sockPort=5E3,udpPort=5001,tcpPort=5002,tcnt=0,zroot,zhost="192.168.2.52",devices,clients=[],loops=[],config={},lampi_admin=[],homeDir="/home/pi",logDir=homeDir+"/log",rrdDir=homeDir+"/rrd",wwwDir=homeDir+"/www",http=require("http");console.log("http loaded");var net=require("net");console.log("net loaded");var dgram=require("dgram");console.log("dgram loaded");var mysql=require("mysql");console.log("mySQL loaded");
var express=require("express");console.log("express loaded");var async=require("async");console.log("ssync loaded");var S=require("string");console.log("string loaded");var fs=require("fs");console.log("fs loaded");var exec=require("child_process").exec;console.log("child_process loaded");var serveStatic=require("serve-static");console.log("erve-static loaded");var WebSocketServer=require("ws").Server;console.log("ws loaded");var SunCalc=require("suncalc");console.log("suncalc loaded");
var strip=require("strip-json-comments");console.log("strip-json-comments loaded");var alarmRouter=require("./modules/alarmRouter");console.log("alarmRouter loaded");var woonveilig=require("./modules/woonveilig");console.log("woonveilig loaded");console.log("All required modules loaded");
function logger(a,c){c=c||debug;if(debug>=c){var b=new Date,b=("00"+(b.getMonth()+1)).slice(-2)+"/"+("00"+b.getDate()).slice(-2)+"/"+b.getFullYear()+" "+("00"+b.getHours()).slice(-2)+":"+("00"+b.getMinutes()).slice(-2)+":"+("00"+b.getSeconds()).slice(-2);console.log("["+b+"] "+a)}}Array.prototype.contains=function(a){return-1<this.indexOf(a)};
process.argv.forEach(function(a,c,b){if(2>c)logger("process.argv["+c+"] skipping: "+a);else switch(a){case "-i":logger("Calling init",1);for(a=0;a<loops.length;a++)clearInterval(loops[a]);logger("Suspending "+loops.length+" timers");config=readConfig();createDbase(function(a,c){a?logger("init:: ERROR: "+a):(logger("init:: createDbase returned "+c,1),Object.keys(config).forEach(function(a){logger("createDbase: "+a+", length: "+config[a].length)}),logger("init:: Starting loadDbase"),loadDbase(function(a,
c){null==a&&logger("init:: loadDbase returned successful "+c,1);var b="";Object.keys(config).forEach(function(a){logger("loadDbase: "+a+", length: "+config[a].length);for(j=0;j<config[a].length;j++)b+=""+a+","+j+": "+config[a][j].name+"<br>";b+="<br>"});b+="<br>init:: done, restarting loops";logger(b,2);start_loops()}))});break;case "-r":var d="";for(a=0;a<loops.length;a++)clearInterval(loops[a]);config=readConfig();logger("reload:: read config #: "+config.length,1);loadDbase(function(a,c){null==
a&&logger("init:: loadDbase returned successful "+c,1);Object.keys(config).forEach(function(a){logger("loadDbase: "+a+", length: "+config[a].length);for(j=0;j<config[a].length;j++)d+=""+a+","+j+": "+config[a][j].name+"<br>";d+="<br>"});d+="<br>init:: done, restarting loops";logger(d,2);start_loops()});break;default:logger("Process argv:: Unknown commandline argument "+a,1)}});var app=express();
app.all("/init",function(a,c,b){logger("Accessing the init section ...",1);var d="",d=d+"init started<br>",d=d+("Suspending "+loops.length+" timers<br>");for(a=0;a<loops.length;a++)clearInterval(loops[a]);config=readConfig();createDbase(function(a,b){a?logger("init:: ERROR: "+a):(logger("init:: createDbase returned "+b,1),logger("init:: Starting loadDbase"),loadDbase(function(a,b){null==a&&logger("init:: loadDbase returned successful "+b,1);d+=printConfig();d+="<br>init:: done, restarting loops";
logger(d,2);c.send(d);start_loops()}))})});
app.all("/load",function(a,c,b){logger("Accessing the reload section ...",1);var d="",d=d+"reload started<br>",d=d+("Suspending "+loops.length+" timers<br>");for(a=0;a<loops.length;a++)clearInterval(loops[a]);config=readConfig();loadDbase(function(a,b){null==a&&logger("load:: loadDbase returned successful "+b,1);Object.keys(config).forEach(function(a){logger("load::: "+a+", length: "+config[a].length);for(j=0;j<config[a].length;j++)d+=""+a+","+j+": "+config[a][j].name+"<br>";d+="<br>"});d+="<br>load:: done, restarting loops";
logger(d,2);c.send(d);start_loops()})});app.all("/sensors",function(a,c,b){console.log("Accessing the sensors section ...");c.send("sensors")});app.all("/config",function(a,c,b){console.log("Printing configuration ...");c.send(printConfig())});app.use("/alarm",alarmRouter);function readConfig(){var a=fs.readFileSync(homeDir+"/config/database.cfg","utf8"),a=JSON.parse(strip(a));3<=debug&&(logger("readConfig:: config read: ",3),console.log(a));return a}
function printConfig(){var a="";Object.keys(config).forEach(function(c){logger("loadDbase: "+c+", length: "+config[c].length);a+="<table>";for(j=0;j<config[c].length;j++){a+="<tr>";a+="<td>"+c+"["+j+"]</td>";a+="<td>: "+config[c][j].name+"</td>";switch(c){case "rules":a+="<td>, active: "+config[c][j].active+"</td>";a+="<td>, jrule: "+JSON.stringify(config[c][j].jrule)+"</td>";a+="<td>, brule: "+JSON.stringify(config[c][j].brule)+"</td>";break;case "sensors":a+="<td>, addr: "+config[c][j].address+
"</td>",a+="<td>, chan: "+config[c][j].channel+"</td>",a+="<td>, loc: "+config[c][j].location+"</td>",a+="<td>, brand: "+config[c][j].brand+"</td>",config[c][j].sensor.hasOwnProperty("temperature")&&(a+="<td>, temp: "+config[c][j].sensor.temperature.val+"</td>"),config[c][j].sensor.hasOwnProperty("humidity")&&(a+="<td>, humi: "+config[c][j].sensor.humidity.val+"</td>"),config[c][j].sensor.hasOwnProperty("airpressure")&&(a+="<td>, press: "+config[c][j].sensor.airpressure.val+"</td>")}a+="</tr>"}a+=
"<br></table>"});return a}function zwave_init(a){http.request({host:zhost,path:"/ZWaveAPI/Data/0",port:"8083",method:"GET",headers:{"Content-Type":"application/json"}},function(c){var b="";c.on("data",function(a){b+=a});c.on("end",function(){3<=debug&&console.log(b);zroot=JSON.parse(b);devices=zroot.devices;logger("Successfully read Z-Wave Data, #devices: "+Object.keys(devices).length,1);a(null,"zwave_init done")})}).end()}
var zwave_upd_options={host:zhost,path:"/ZWaveAPI/Data/"+(Math.floor(Date.now()/1E3)-alarm_interval),port:"8083",method:"GET",headers:{"Content-Type":"application/json"}},zwave_upd_cb=function(a){var c="";a.on("data",function(a){c+=a});a.on("end",function(){3<=debug&&console.log(c);var a=JSON.parse(c);Object.keys(a).forEach(function(c){for(var e=zroot,g=c.split("."),f=f;f<g.length-1;f++)pe=g[f],e=e[g[pe]];void 0===e&&logger("pobj is null line 340, "+g.slice(-1),1);e[g.slice(-1)]=a[c]});logger("Successfully read the Z-Wave Data stucture, Read "+
Object.keys(a).length+" records",2)})};
function broadcast(a,c,b){logger("broadcast:: message: "+a,2);var d=[],e=[];clients.forEach(function(c){e.push(c);d.push(function(c){setTimeout(function(){var d=e.shift();if(void 0!=b&&0<=b.indexOf(d.type))logger("broadcast:: Masking for socket: "+d.name+", type: "+d.type,3),c(null,d.name+"-masked");else switch(d.type){case "raw":logger("Broadcast to Rawsocket: "+d.name,2);1!=d.write(a)?(logger("broadcast:: raw socket error",1),c("broadcast raw error",null)):(logger("broadcast :: raw client: "+d.name,
3),c(null,d.name));break;case "ws":d.send(a,function(a){a?(logger("broadcast:: ws send error: "+a,1),c(a,null)):(logger("broadcast :: web client: "+d.name,3),c(null,d.name))});break;default:logger("broadcast:: unknown type: "+d.type,2),c("broadcast:: Unknown type: "+d.type,null)}},300)})});async.series(d,function(a,c){a?logger("broadcast:: ERROR ERROR: "+a,1):logger("broadcast:: finished, results: "+c,2)})}
var HOST="0.0.0.0",server=net.createServer(function(a){a.name=a.remoteAddress+":"+a.remotePort;a.type="raw";a.trusted=1;logger("SOCKET:: socket server connected to: "+a.name,1);clients.push(a);a.on("end",function(){logger("SOCKET:: socket server "+a.name+" disconnected",1);clients.splice(clients.indexOf(a),1)});a.on("text",function(a){logger("SOCKET:: socket server received text: "+a,1)});a.on("data",function(c){logger("SOCKET:: socket data received: "+c+", trusted: "+a.trusted,2);socketHandler(c,
a)});a.on("message",function(c){logger("SOCKET:: socket message received: "+c,2);socketHandler(c,a)});a.on("upgrade",function(a,b,d){logger("SOCKET:: socket upgrade received: "+a,1);b.write(JSON.stringify({tcnt:868,type:"json",action:"alarm",scene:"",message:"NODE ALARM"}))});a.on("connect",function(){logger("SOCKET:: socket Connection Established ",1)})});server.listen(tcpPort,HOST,function(){logger("TCP server listening to addr:port: "+HOST+":"+tcpPort)});
function checkIP(a){a=a.split(".");a[0]=a[0].split("//")[1];var c=zhost.split(".");if(c[0]==a[0]&&c[1]==a[1]&&c[2]==a[2])return logger("checkIP:: client is from local network",1),1;logger("checkIP:: client is from remote network: "+a[0]+" "+a[1]+" "+a[2],1);return 0}var wss=new WebSocketServer({port:sockPort});
wss.on("connection",function(a){a.name=a.upgradeReq.headers.origin;a.type="ws";a.trusted=checkIP(a.upgradeReq.headers.origin);logger("WS:: new socket connected: "+a.name,1);clients.push(a);a.on("message",function(c){2<=debug&&console.log("WS rcv msg, trusted: "+a.trusted+": %s",c);socketHandler(c,a)});a.on("close",function(){logger("WS:: socket "+a.name+" disconnected",1);clients.splice(clients.indexOf(a),1)})});var userver=dgram.createSocket("udp4");
userver.on("error",function(a){console.log("UDP server error:\n"+a.stack);userver.close()});userver.on("message",function(a,c){logger("UDP message from "+c.address+":"+c.port,2);logger("UDP server  msg: "+a,3);c.name=c.address+":"+c.port;c.type="udp";socketHandler(a,c)});userver.on("listening",function(){var a=userver.address();logger("UDP server listening to addr:port: "+a.address+":"+a.port,1)});var connection=mysql.createConnection({host:"192.168.2.11",user:"coco",password:"coco",database:"LamPI"});
function connectDbase(a){connection.connect(function(c){c?(logger("ERROR:: Connecting to the MySQL Database, make sure database exists and permissions are OK",1),a("connectDbase error","null")):(logger("Connected to the MySQL Database",1),a(null,"mysql connected"))})}function queryDbase(a,c){var b=connection.query(a,function(a,e,g){a?(console.log("queryDbase:: err: "+a+", query: <"+b.sql+">"),c("queryDbase err: "+a,null)):(3<=debug&&console.log("queryDbase:: is: \n",e),c(null,e))})}
function insertDb(a,c,b){var d=connection.query("INSERT INTO "+a+" SET ?",c,function(a,c){a?(console.log("insertDb:: err: "+a+", query ",d.sql),b("Error: "+a,null)):(3<=debug&&console.log("insertDb success:: result: \n",c),b(null,c))})}function updateDb(a,c,b){var d=connection.query("UPDATE "+a+" SET ? WHERE id=?",[c,c.id],function(a,c){a?(console.log("updateDb:: err: "+a+", query ",d.sql),b(a,c)):(3<=debug&&console.log("updateDb success:: result: \n",c),b(null,c))})}
function deleteDb(a,c,b){var d=connection.query("DELETE FROM "+a+" WHERE id=?",c.id,function(a,c){a?(console.log("deleteDb:: err: "+a+", query ",d.sql),b(a,c)):(3<=debug&&console.log("deleteDb success:: result: \n",c),b(null,c))})}function delDevDb(a,c,b){var d=connection.query("DELETE FROM "+a+" WHERE id=? and room=?",[c.id,c.room],function(a,c){a?(console.log("updateDbe:: err: "+a+", query ",d.sql),b(a,c)):(3<=debug&&console.log("deleteDb success:: result: \n",c),b(null,c))})}
function updDevDb(a,c,b){var d=connection.query("UPDATE "+a+" SET ? WHERE id=? AND room=?",[c,c.id,c.room],function(a,c){a?(console.log("updateDbe:: err: "+a+", query ",d.sql),b(a,c)):(3<=debug&&console.log("updDevDb success:: result: \n",c),b(null,c))})}
function createDbase(a){async.series([function(a){queryDbase("CREATE TABLE IF NOT EXISTS users(id INT, descr CHAR(128), name CHAR(20), login CHAR(20), passw CHAR(32), class INT )",function(b,d){var e=[];b?a(b,null):queryDbase("SELECT * FROM users",function(b,d,h){if(b)a(b,null);else if(0==d.length){for(d=0;d<config.users.length;d++)insertDb("users",config.users[d],function(a){e.push("u")});a(b,"uers made, sizeof users is:  "+config.users.length)}else logger("createDbase:: WARNING: There are already users in the user table"),
a(b,"existing users")})})},function(a){queryDbase("DROP TABLE IF EXISTS rooms",function(b,d){queryDbase("CREATE TABLE rooms(id INT, descr CHAR(128), name CHAR(20) )",function(b,d){a(b,"rooms made")})})},function(a){queryDbase("DROP TABLE IF EXISTS devices",function(b,d){queryDbase("CREATE TABLE devices(id CHAR(3), descr CHAR(128), uaddr CHAR(3), gaddr CHAR(12), room CHAR(12), name CHAR(20), type CHAR(12), val INT, lastval INT, brand CHAR(20) )",function(b,d){a(b,"devices made")})})},function(a){queryDbase("DROP TABLE IF EXISTS scenes",
function(b,d){queryDbase("CREATE TABLE scenes(id INT, descr CHAR(128), val INT, name CHAR(20), seq CHAR(255) )",function(b,d){a(b,"scenes made")})})},function(a){queryDbase("DROP TABLE IF EXISTS timers",function(b,d){queryDbase("CREATE TABLE timers(id INT, descr CHAR(128), name CHAR(20), scene CHAR(20), tstart CHAR(20), startd CHAR(20), endd CHAR(20), days CHAR(20), months CHAR(20), skip INT )",function(b,d){a(b,"timers made")})})},function(a){queryDbase("DROP TABLE IF EXISTS handsets",function(b,
d){queryDbase("CREATE TABLE handsets(id INT, descr CHAR(128), name CHAR(20), brand CHAR(20), addr CHAR(20), unit INT, val INT, type CHAR(20), scene CHAR(255) )",function(b,d){a(null,"handsets made")})})},function(a){queryDbase("DROP TABLE IF EXISTS settings",function(b,d){queryDbase("CREATE TABLE settings(id INT, descr CHAR(128), val CHAR(128), name CHAR(20) )",function(b,d){a(null,"settings made")})})},function(a){queryDbase("DROP TABLE IF EXISTS controllers",function(b,d){queryDbase("CREATE TABLE controllers(id INT, descr CHAR(128), name CHAR(20), fname CHAR(128) )",
function(b,d){a(null,"controllers made")})})},function(a){queryDbase("DROP TABLE IF EXISTS brands",function(b,d){queryDbase("CREATE TABLE brands(id INT, descr CHAR(128), name CHAR(20), fname CHAR(128) )",function(b,d){a(null,"brands made")})})},function(a){queryDbase("DROP TABLE IF EXISTS sensors",function(b,d){queryDbase("CREATE TABLE sensors(id INT, descr CHAR(128), name CHAR(20), location CHAR(20), brand CHAR(20), address CHAR(20), channel CHAR(8), type CHAR(32), caps CHAR(64), sensor CHAR(255) )",
function(b,d){a(null,"sensors made")})})},function(a){queryDbase("DROP TABLE IF EXISTS rules",function(b,d){queryDbase("CREATE TABLE rules(id INT, descr CHAR(128), name CHAR(20), active CHAR(1), jrule TEXT(65000), brule CHAR(255) )",function(b,d){a(null,"rules made")})})},function(a){var b=[];logger("createDb starting for devices, #devices: "+config.devices.length);for(var d=0;d<config.devices.length;d++)insertDb("devices",config.devices[d],function(a,c){b.push("d")});a(null,"devices: "+b)},function(a){var b=
[];logger("createDb starting for rooms, #rooms: "+config.rooms.length);for(var d=0;d<config.rooms.length;d++)insertDb("rooms",config.rooms[d],function(a){b.push("r")});a(null,"fill rooms"+config.rooms.length)},function(a){for(var b=[],d=0;d<config.scenes.length;d++)insertDb("scenes",config.scenes[d],function(a){b.push("s")});a(null,"scenes: "+b)},function(a){for(var b=[],d=0;d<config.timers.length;d++)insertDb("timers",config.timers[d],function(a){b.push("t")});a(null,"timers: "+b)},function(a){for(var b=
[],d=0;d<config.handsets.length;d++)insertDb("handsets",config.handsets[d],function(a){b.push("h")});a(null,"handsets: "+b)},function(a){for(var b=[],d=0;d<config.settings.length;d++)insertDb("settings",config.settings[d],function(a){b.push("x")});a(null,"settings: "+b)},function(a){for(var b=[],d=0;d<config.controllers.length;d++)insertDb("controllers",config.controllers[d],function(a){b.push("c")});a(null,"controllers: "+b)},function(a){for(var b=[],d=0;d<config.brands.length;d++)insertDb("brands",
config.brands[d],function(a){b.push("b")});a(null,"brands: "+b)},function(a){for(var b=[],d=0;d<config.rules.length;d++){var e=config.rules[d];e.jrule=JSON.stringify(config.rules[d].jrule);e.brule=JSON.stringify(config.rules[d].brule);insertDb("rules",e,function(a){b.push("s")})}a(null,"rules: "+b)},function(a){for(var b=[],d=0;d<config.sensors.length;d++){var e=config.sensors[d];e.sensor=JSON.stringify(config.sensors[d].sensor);insertDb("sensors",e,function(a){b.push("w")})}a(null,"sensors: "+b)}],
function(c,b){c?(logger("createDbase:: ERROR: "+c),a(c,b)):(logger("createDbase:: Databases created, result: ",1),console.log(b),a(null,b))})}
function loadDbase(a){async.series([function(a){queryDbase("SELECT * from devices",function(b,d){config.devices=d;for(var e=0;e<config.devices.length;e++)"868"==config.devices[e].gaddr&&(lampi_admin[config.devices[e].uaddr]={val:config.devices[e].val,checks:3});a(null,"devices "+d.length)})},function(a){queryDbase("SELECT * from rooms",function(b,d){config.rooms=d;a(null,"rooms "+d.length)})},function(a){queryDbase("SELECT * from scenes",function(b,d){config.scenes=d;a(null,"scenes "+d.length)})},
function(a){queryDbase("SELECT * from timers",function(b,d){config.timers=d;a(null,"timers "+d.length)})},function(a){queryDbase("SELECT * from settings",function(b,d){config.settings=d;a(null,"settings "+d.length)})},function(a){queryDbase("SELECT * from brands",function(b,d){config.brands=d;a(null,"brands "+d.length)})},function(a){queryDbase("SELECT * from handsets",function(b,d){config.handsets=d;a(null,"handsets "+d.length)})},function(a){queryDbase("SELECT * from rules",function(b,d){if(null===
d)logger("loadDbase:: select rules returns 0",1),a("loadDbase rules error",null);else{for(var e=0;e<d.length;e++)try{d[e].jrule=JSON.parse(d[e].jrule),d[e].brule=JSON.parse(d[e].brule)}catch(g){logger("JSON error parsing rules",1),console.log(g),a("loadDbase rules error",null)}config.rules=d;a(null,"rules "+d.length)}})},function(a){queryDbase("SELECT * from sensors",function(b,d){if(null===d)logger("loadDbase:: select sensors returns 0",1),a("loadDbase sensors error",null);else{config.sensors=d;
for(var e=0;e<d.length;e++)d[e].sensor=JSON.parse(d[e].sensor);a(null,"sensors "+d.length)}})},function(a){queryDbase("SELECT * from controllers",function(b,d){config.controllers=d;a(null,"controllers "+d.length)})}],function(c,b){a(null,b)})}
function deviceSet(a,c){var b=config.devices[a].uaddr,d=config.devices[a].type,e=Math.floor(99*c/32),g={host:"192.168.2.52",path:"",port:"8083",method:"GET",headers:{"Content-Type":"application/json"}};callSet=function(a){a.on("data",function(a){logger("WARNING deviceSet received data: "+a,2)});a.on("end",function(){logger("deviceSet has ended",2)});a.on("error",function(){logger("deviceSet ERROR Updating dev: "+b+"",1)})};logger("deviceSet:: setting zdev: "+b+" to "+c,1);switch(d){case "dimmer":g.path=
"/ZWaveAPI/Run/devices["+b+"].instances[0].commandClasses[38].Set("+e+")";break;case "switch":g.path="/ZWaveAPI/Run/devices["+b+"].instances[0].commandClasses[37].Set("+e+")";break;case "thermostat":g.path="/ZWaveAPI/Run/devices["+b+"].instances[0].commandClasses[67].ThermostatSetPoint.Set(1,"+e+")";break;default:logger("deviceSet:: Unknown type "+d)}http.request(g,callSet).end()}
function deviceGet(a,c){var b=config.devices[a].uaddr,d=config.devices[a].val,e=lampi_admin[b].val,g;http.request({host:"192.168.2.52",path:"/ZWaveAPI/Run/devices["+b+"].Basic.Get()",port:"8083",method:"GET",headers:{"Content-Type":"application/json"}},function(f){f.on("data",function(a){logger("ERROR deviceGet received data: "+a,3)});f.on("end",function(){logger("deviceGet:: device: "+b+", lampi dev index: "+a,2);switch(c){case "switch":if(0==devices[b].instances[0].commandClasses[37].data.interviewDone.value){console.log("ERROR:: Switch device "+
b+" Dead");return}g=devices[b].instances[0].commandClasses[37].data.level.value+0;break;case "dimmer":if(!1===devices[b].instances[0].commandClasses[38].data.interviewDone.value){console.log("ERROR:: Dimmer device "+b+" Dead");return}g=Math.ceil(devices[b].instances[0].commandClasses[38].data.level.value/99*32);break;case "thermostat":if(!1===devices[b].instances[0].commandClasses[67].data.interviewDone.value){logger("ERROR:: Thermostat device "+b+" Dead",2);return}g=devices[b].instances[0].commandClasses[67].data[1].val.value;
return;default:logger("ERROR lampi type not supported: "+c);return}logger("Dev: "+b+", lVal: "+d+", aVal: "+e+", zVal: "+g,2);if(g==d&&e==d)logger("X X X, all values of device "+b+" are equal",3);else if(g==d&&e!=d)logger("Y X Y, updating device "+b+" to zVal: "+g,1),lampi_admin[b].val=g;else if(d!=g&&e==g){logger("Y X X, The gui valui of "+b+" has changed",1);config.devices[a].val=d;updDevDb("devices",config.devices[a],function(a){logger("deviceGet:: store_device "+b+" finished OK",1)});var f="!R"+
config.devices[a].room+"D"+b+"F",f=0==d?f+"0":f+"dP"+d,f={tcnt:""+tcnt++,type:"raw",action:"gui",cmd:"zwave",gaddr:"868",uaddr:""+b,val:""+d,message:f};logger("deviceGet:: to icsHandler: "+JSON.stringify(f),1);icsHandler(f,null)}else if(g!=d&&e==d){logger("X X Y, Z-Wave changed; Update lampi gui for device "+b+" to value "+g,1);f={tcnt:""+tcnt++,type:"raw",action:"gui",cmd:"zwave",gaddr:"868",uaddr:""+b,val:""+g,message:"!R"+config.devices[a].room+"D"+b+"F"+g};switch(c){case "switch":f.message="!R"+
config.devices[a].room+"D"+b+"F"+g;break;case "dimmer":f.message="!R"+config.devices[a].room+"D"+b+"FdP"+g;break;default:logger("No Manual Update Action defined")}logger("Sending data to icsHandler: "+JSON.stringify(f),1);icsHandler(f,null);logger("Updated device to "+g+", cmd string: "+f.message,1)}else logger("Y X Z, reset admin for device "+b+" to lampi defined value "+d,1),lampi_admin[b].val=d});f.on("error",function(){logger("ERROR Updating dev: "+b+"",1)});f.on("timeout",function(){logger("deviceGet:: TIMEOUT");
f.abort()});f.setTimeout(5E3)}).end()}function getTime(){var a=new Date;return S(a.getHours()).padLeft(2,"0").s+":"+S(a.getMinutes()).padLeft(2,"0").s+":"+S(a.getSeconds()).padLeft(2,"0").s}function getTicks(){return Math.floor(Date.now()/1E3)}function getSunRise(){var a=SunCalc.getTimes(new Date,51.5,-.1);return Math.floor(a.sunrise.getTime()/1E3)}function getSunSet(){var a=SunCalc.getTimes(new Date,51.5,-.1);return Math.floor(a.sunset.getTime()/1E3)}
function printTime(a){a=new Date(a);return S(a.getHours()).padLeft(2,"0").s+":"+S(a.getMinutes()).padLeft(2,"0").s+":"+S(a.getSeconds()).padLeft(2,"0").s}function findHandset(a,c,b){var d=config.handsets;logger("findHandset:: length: "+d.length+", addr: "+a+", unit: "+c,2);var e;for(e=0;e<d.length&&(d[e].addr!=a||d[e].unit!=c||d[e].val!=b);e++);return e<d.length?e:-1}
function findDevice(a,c){var b=config.devices;logger("findDevice:: length: "+b.length+", room: "+a+", uaddr: "+c,2);var d;for(d=0;d<b.length&&(b[d].room!=a||b[d].uaddr!=c);d++);return d<b.length?d:-1}function idDevice(a,c){logger("findDevice:: length: "+config.devices.length+", room: "+a+", id: "+c,2);var b;for(b=0;b<config.devices.length&&(config.devices[b].room!=a||config.devices[b].id!=c);b++);return b<config.devices.length?b:-1}
function gaddrDevice(a,c){logger("gaddrDevice:: length: "+config.devices.length+", gaddr: "+a+", uaddr: "+c,2);var b;for(b=0;b<config.devices.length&&(config.devices[b].gaddr!=a||config.devices[b].uaddr!=c);b++);return b<config.devices.length?b:-1}function findScene(a){var c;for(c=0;c<config.scenes.length&&config.scenes[c].name!=a;c++);return c<config.scenes.length?c:-1}
function addrSensor(a,c){logger("addrSensor:: address: "+a+", channel: "+c,2);var b;for(b=0;b<config.sensors.length&&(config.sensors[b].address!=a||config.sensors[b].channel!=c);b++);return b<config.sensors.length?b:-1}function delFromArray(a,c){var b;for(b=0;b<a.length&&a[b].id!=c.id;b++);a.splice(b,1)}function updFromArray(a,c){var b;for(b=0;b<a.length;b++)if(a[b].id==c.id){a[b]=c;break}}function iArray(a,c){var b;for(b=0;b<a.length;b++)if(a[b].id==c.id)return b;return-1}
function allOff(a,c){for(var b=[],d=[],e=0;e<config.devices.length;e++)if(config.devices[e].room==a&&"thermostat"!=config.devices[e].type){var g=config.devices[e].brand,g={tcnt:""+tcnt++,type:"raw",action:"gui",cmd:config.brands[g].fname,gaddr:""+config.devices[e].gaddr,uaddr:""+config.devices[e].uaddr,val:"0",message:"!R"+a+"D"+config.devices[e].uaddr+"F0"};d.push(JSON.stringify(g));b.push(function(a){setTimeout(function(){var b=d.shift();logger("allOff:: timeout str: "+b);broadcast(b,c);a(null,
"yes")},2E3)});"868"==config.devices[e].gaddr&&deviceSet(e,"0")}async.series(b,function(a,b){a?logger("allOFF:: ERROR ERROR: "+a,1):logger("allOff:: OKE OKE  finished, results: "+b,2)})}function alarmHandler(a,c){logger("alarmHandler:: buf: "+a,1)}
function consoleHandler(a,c){logger("consoleHandler:: request: "+a,1);var b="";switch(a){case "logs":exec("tail -30 /home/pi/log/PI-node.log",function(d,e,h){b=null===d?b+(e.split("\n").join("<br>")+"<br><br>"+h):b+("<br>  CONSOLE ERROR:   "+d+"     <br>  "+h);d={tcnt:""+tcnt++,type:"raw",action:"console",request:a,message:b};c.send(JSON.stringify(d))});return;case "zlogs":break;case "sunrisesunset":var d=SunCalc.getTimes(new Date,51.5,-.1),e=d.sunrise.getHours()+":"+("00"+d.sunrise.getMinutes()).slice(-2),
d=d.sunset.getHours()+":"+("00"+d.sunset.getMinutes()).slice(-2),b="<br>Sunrise: "+e+" Hrs<br>Sunset: "+d+" Hrs<br>";break;case "clients":logger("Active socket Clients:: ",1);b="<br>";clients.forEach(function(a){b+=a.name+" : "+a.type+"    <br>"});break;case "rebootdaemon":b="<br>Rebooting Node Daemon Now<br><br>this will take a minute<br>";setTimeout(function(){exec("nohup /home/pi/scripts/PI-node -r &",function(a,b,d){})},2E3);break;case "printConfig":b=printConfig();break;default:logger("consoleHandler:: Unknown request: "+
a),b="Unknown request<br>"}e={tcnt:""+tcnt++,type:"raw",action:"console",request:a,message:b};c.send(JSON.stringify(e))}
function dbaseHandler(a,c,b){logger("dbaseHandler:: cmd: "+a,1);2<=debug&&(logger("dbaseHandler:: cmd: "+a+", args: ",2),console.log(c));switch(a){case "add_room":insertDb("rooms",c,function(a){logger("add_room finished OK "+a,1)});config.rooms.push(c);break;case "delete_room":deleteDb("rooms",c,function(a){logger("delete_room finished OK "+a,1)});delFromArray(config.rooms,c);break;case "add_scene":insertDb("scenes",c,function(a){logger("add_scene finished OK "+a,1)});config.scenes.push(c);break;
case "delete_scene":deleteDb("scenes",c,function(a){logger("delete_scenes finished OK "+a,1)});delFromArray(config.scenes,c);break;case "store_scene":updateDb("scenes",c,function(a){logger("store_scenes finished OK "+a,1)});updFromArray(config.scenes,c);break;case "add_timer":insertDb("timers",c,function(a){logger("add_timer finished OK "+a,1)});config.timers.push(c);break;case "delete_timer":deleteDb("timers",c,function(a){logger("delete_timers finished OK "+a,1)});delFromArray(config.timers,c);
break;case "store_timer":updateDb("timers",c,function(a){logger("store_timers finished OK "+a,1)});updFromArray(config.timers,c);break;case "add_handset":insertDb("handsets",c,function(a){logger("add_handset finished OK "+a,1)});config.handsets.push(c);break;case "delete_handset":deleteDb("handsets",c,function(a){logger("delete_handsets finished OK "+a,1)});delFromArray(config.handsets,c);break;case "list_user":var d={};3<=b.trusted?connection.query("Select * FROM users",function(a,c,f){a?logger("list_user:: ERROR: "+
a):(d={tcnt:tcnt++,type:"raw",action:"list_user",message:c},logger("list_user returning: "+d),b.send(JSON.stringify(d),function(a){void 0!==a&&(logger("list_user:: ERROR sending user data "+a,1),logger("list_user:: Socket: "+b.name+", type: "+b.type,1))}))}):(d={tcnt:tcnt++,type:"raw",action:"login",message:"Please login with a user that has a higher trustlevel"},b.send(JSON.stringify(d),function(a){void 0!==a&&(logger("list_user:: ERROR responding load database "+a,1),logger("list_user:: Socket: "+
b.name+", type: "+b.type,1))}),logger("list_user:: trust level socket "+b.name+" insufficient: "+b.trusted));break;case "add_user":insertDb("users",c,function(a){logger("add_user finished OK "+a,1)});config.users.push(c);break;case "delete_user":deleteDb("users",c,function(a){logger("delete_user finished OK "+a,1)}),delFromArray(config.users,c);case "store_user":updateDb("users",c,function(a){logger("store_user finished OK "+a,1)});updFromArray(config.users,c);break;case "add_sensor":insertDb("sensors",
c,function(a){logger("add_sensor finished OK "+a,1)});config.sensors.push(c);break;case "delete_sensor":deleteDb("sensors",c,function(a){logger("delete_sensor finished OK "+a,1)});delFromArray(config.sensors,c);break;case "add_rule":config.rules.push(c);insertDb("rules",c,function(a){logger("add_rule finished OK "+a,1)});break;case "store_rule":updFromArray(config.rules,c);updateDb("rules",c,function(a){logger("add_rule finished OK "+a,1)});break;case "delete_rule":deleteDb("rules",c,function(a){logger("delete_rule finished OK "+
a,1)});delFromArray(config.rules,c);break;case "store_setting":"debug"==c.name&&(debug=Number(c.val));"alarm"==c.name&&(3<=b.trusted?woonveilig.wvSet(c.val,function(a,b){logger("Alarm set to: "+b)},1):(d={tcnt:tcnt++,type:"raw",action:"login",message:"Alarm can only be set with a user that has a higher trustlevel"},b.send(JSON.stringify(d),function(a){void 0!==a&&(logger("store_setting:: ERROR sending login request "+a,1),logger("store_setting:: Socket: "+b.name+", type: "+b.type,1))}),a=iArray(config.settings,
c),c.val=config.settings[a].val,logger("store_setting:: trust of "+b.name+" too low: "+b.trusted+"to change "+config.settings[a].name,1)));updateDb("settings",c,function(a){logger("store_settings finished OK "+a,1);updFromArray(config.settings,c);a={};a.settings=config.settings;a={tcnt:tcnt++,type:"json",action:"upd_config",message:a};b.send(JSON.stringify(a),function(a){void 0!==a&&(logger("store_setting:: ERROR sending settings "+a,1),logger("store_setting:: Socket: "+b.name+", type: "+b.type,1))})});
break;case "add_device":insertDb("devices",c,function(a){logger("add_device finished OK",1)});config.devices.push(c);break;case "delete_device":delDevDb("devices",c,function(a){logger("delete_device finished OK",1)});a=idDevice(c.room,c.id);-1!=a?config.devices.splice(a,1):logger("dbaseHandler:: delete_device failed for index: "+a+", room: "+c.room+", id: "+c.id);break;case "store_device":updDevDb("devices",c,function(a){logger("store_device finished OK",1)});a=idDevice(c.room,c.id);-1!=a?config.devices[a]=
c:logger("dbaseHandler:: store_device failed for index: "+a);break;default:logger("dbaseHandler:: Unknown command: "+a,1)}}
function createEnergyDb(a,c,b){var d=[];logger("createEnergyDb:: ",1);d+=void 0!==c.kw_hi_use?"DS:kw_hi_use:COUNTER:600:0:999999999 ":"";d+=void 0!==c.kw_lo_use?"DS:kw_lo_use:COUNTER:600:0:999999999 ":"";d+=void 0!==c.kw_hi_ret?"DS:kw_hi_ret:COUNTER:600:0:999999999 ":"";d+=void 0!==c.kw_lo_ret?"DS:kw_lo_ret:COUNTER:600:0:999999999 ":"";d+=void 0!==c.gas_use?"DS:gas_use:COUNTER:600:0:999999999 ":"";d+=void 0!==c.kw_act_use?"DS:kw_act_use:GAUGE:600:0:999999 ":"";d+=void 0!==c.kw_act_ret?"DS:kw_act_ret:GAUGE:600:0:999999 ":
"";d+=void 0!==c.kw_ph1_use?"DS:kw_ph1_use:GAUGE:600:0:999999 ":"";d+=void 0!==c.kw_ph2_use?"DS:kw_ph2_use:GAUGE:600:0:999999 ":"";d+=void 0!==c.kw_ph3_use?"DS:kw_ph3_use:GAUGE:600:0:999999 ":"";d+="RRA:AVERAGE:0.5:1:360 RRA:AVERAGE:0.5:30:288 ";d+="RRA:AVERAGE:0.5:90:672 ";d+="RRA:AVERAGE:0.5:360:744 ";d+="RRA:AVERAGE:0.5:216:1460 ";d+="RRA:MIN:0.5:90:672 ";d+="RRA:MAX:0.5:90:672 ";a="rrdtool create "+a+" --step 20 "+d;logger("createEnergyDb:: execStr: "+a,1);exec(a,function(a,d,f){null===a?(logger("createEnergyDb:: ok, stdout: "+
d+"; stderr: "+f,2),energyHandler(c,b)):logger("createEnergyDb:: ERROR: "+a+"; stderr: "+f)})}
function energyHandler(a,c){var b=rrdDir+"/db/e350.rrd",d=[];logger("energyHandler:: action: "+a.action+", brand: "+a.brand,1);fs.existsSync(b)||(logger("energyHandler:: rrdtool db "+b+" does not exist ... creating",1),createEnergyDb(b,a));d+=":"+Math.floor(1E3*Number(a.kw_hi_use));d+=":"+Math.floor(1E3*Number(a.kw_lo_use));d+=":"+Math.floor(1E3*Number(a.kw_hi_ret));d+=":"+Math.floor(1E3*Number(a.kw_lo_ret));d+=":"+Math.floor(1E3*Number(a.gas_use));d+=":"+Math.floor(1E3*Number(a.kw_act_use));d+=":"+
Math.floor(1E3*Number(a.kw_act_ret));d+=":"+Math.floor(1E3*Number(a.kw_ph1_use));d+=":"+Math.floor(1E3*Number(a.kw_ph2_use));d+=":"+Math.floor(1E3*Number(a.kw_ph3_use));b="rrdtool update "+b+" N"+d;logger("energyHandler:: execStr: "+b,2);exec(b,function(a,b,d){null===a?logger("energyHandler:: stdout: "+b+"; stderr: "+d,2):logger("energyHandler:: ERROR: "+a+"; stderr: "+d)});broadcast(JSON.stringify(a),c,"raw")}
function graphHandler(a,c){var b=a.gcmd,d=a.gtype,e=a.gperiod,g=a.gsensors,f,h,k,l,m="e350.rrd",n="ff0000 111111 00ff00 0000ff ff00ff 666666 00ffff ff3399 ffff00".split(" ");logger("graphHandler:: Starting for "+b+":"+d+":"+e+":"+g);void 0==g&&(logger("graphHandler:: No sensors defined",1),g=[]);switch(b){case "energy":switch(d){case "E_GAS":k=sensorType="gas_use";l="M3";break;case "E_ACT":sensorType="pwr act";k="pwr_act";l="kWhr";break;case "E_USE":sensorType="pwr use";k="pwr_use";l="kWhr";break;
case "E_PHA":sensorType="phase use",k="pwr_pha",l="kWhr"}break;case "weather":case "sensors":switch(d){case "T":sensorType="temperature";k="all_temp";l="C";break;case "H":sensorType="humidity";k="all_humi";l=" %%";break;case "P":sensorType="airpressure",k="all_press",l="hPa"}}switch(e){case "1h":f="";break;case "1d":f="";break;case "1w":f=":step=3600";break;case "1m":f=":step=8640";break;case "1y":f=":step=21300";break;default:logger("graphHandler:: ERROR unknown period: "+e,1)}for(var p=d="",t="",
q=0;q<g.length;q++)h=q+1==g.length?"\\n":"","energy"==b?(m="e350.rrd",d+="DEF:t"+(q+1)+"=/home/pi/rrd/db/"+m+":"+g[q]+":AVERAGE"+f+" "):(m=g[q]+".rrd",d+="DEF:t"+(q+1)+"=/home/pi/rrd/db/"+m+":"+sensorType+":AVERAGE "),p+="LINE2:t"+(q+1)+"#"+n[q%n.length]+':"'+g[q]+h+'" ',t+="GPRINT:t"+(q+1)+':LAST:"'+g[q]+" %3.0lf "+l+h+'" ';b="/usr/bin/rrdtool graph /home/pi/www/graphs/"+k+"_"+e+".png"+(" -s N-"+e+' -a PNG -E --title="'+sensorType+' readings" ');b+='--vertical-label "'+sensorType+'" --width 750 --height 500 ';
b+=d;b+=p;b+=t;logger("graphHandler:: \n"+b,2);exec(b,function(b,d,e){null===b?(logger("graphHandler:: ok, stdout: "+d+"; stderr: "+e,2),broadcast(JSON.stringify(a),c,"raw")):logger("graphHandler:: ERROR: "+b+"; stderr: "+e)})}
function guiHandler(a,c){logger("guiHandler:: buf: "+a,1);var b=gaddrDevice(a.gaddr,uaddr);"868"==config.devices[b].gaddr&&deviceSet(b,a.val);b={tcnt:""+tcnt++,type:"json",action:"gui",cmd:a.cmd,gaddr:""+a.gaddr,uaddr:""+a.uaddr,val:""+a.val,message:a.ics};logger("guiHandler:: to broadcast: "+JSON.stringify(b),2);broadcast(JSON.stringify(b),c)}
function icsHandler(a,c){var b=a.message,d=/\d+/;switch(b.substr(0,2)){case "!R":var e="",g=b.match(d);if(-1!=b.indexOf("Fa")){allOff(g,c);break}var f=b.indexOf("D"),h=b.substr(f+1,2).match(d);logger("icsHandler:: uaddr: "+h,2);f=b.indexOf("FdP");-1!=f?(e=d=Number(b.substr(f+3,2).match(d)),logger("icsHandler:: Found dimmer value: "+d,2)):(f=b.indexOf("F"),d=b.substr(f+1,2).match(d),0==d&&(e="off"),1==d&&(e="on"),logger("icsHandler:: Found switch value: "+d,2));f=findDevice(g,h);if(0>f||f>config.devices.length){logger("icsHandler:: ERROR for index: "+
f+", #devices: "+config.devices.length+" room: "+g+", uaddr: "+h+", ics: "+b,1);break}var g=config.devices[f].gaddr,k=config.brands[config.devices[f].brand].fname,e={tcnt:""+tcnt++,type:"raw",action:"gui",cmd:k,gaddr:""+g,uaddr:""+h,val:""+e,message:b};config.devices[f].val=d;"868"==g&&deviceSet(f,d);updDevDb("devices",config.devices[f],function(a){logger("icsHandler:: updDevDb ics "+b+" finished OK",1)});logger("icsHandler:: to broadcast: "+JSON.stringify(e),2);broadcast(JSON.stringify(e),c);break;
case "!F":logger("icsHandler:: !F Scene handler",1);queue.qinsert({ticks:getTicks(),scene:"gui",seq:"!R1D1FdP10,00:00:01"});break;case "!T":logger("icsHandler:: Timer command");queue.qinsert({ticks:getTicks(),scene:"gui",seq:"!R1D1F0"});break;case "!A":logger("icsHandler:: Handset message "+a.message,1);h=b.match(d);f=b.indexOf("D");g=b.substr(f+1,2).match(d);f=b.indexOf("F");e=b.substr(f+1,2).match(d);logger("icsHandler:: handset addr: "+h+",unit: "+g+", val: "+e,1);e=findHandset(h,g,e);if(0<=e)switch(e=
config.handsets[e],e.type){case "scene":queueScene(e.scene);break;default:logger("icsHandler:: handset type not recognized: "+e.type,1)}else logger("icsHandler:: Handset "+h+" not found",1);break;case "!Q":logger("icsHandler:: All Off Q command",1);break;default:logger("icsHandler:: Unknown command ics code: <"+b+">",1)}}
function loginHandler(a,c){var b=a.login.toLowerCase();logger("loginHandler:: login: "+b,1);var d=connection.query("SELECT * FROM users WHERE login=?",[b],function(b,g,f){b?console.log("queryDbase:: err: "+b+", query: <"+d.sql+">"):(1<=debug&&console.log("loginHandler:: returns: \n",g),0==g.length?(logger("loginHandler:: ERROR not results for user "+a.login,1),a.action="login",socketHandler(JSON.stringify(a),c)):1<g.length?logger("loginHandler:: ERROR returning "+g.length+" values",1):g[0].passw==
a.password?(logger("loginHandler:: checked user name: "+g[0].name,1),0==c.trusted?(b={tcnt:tcnt++,type:"json",action:"load_database",cmd:"",response:config},c.send(JSON.stringify(b),function(a){void 0!==a&&(logger("loginHandler:: ERROR responding load database "+a,1),logger("loginHandler:: Socket: "+c.name+", type: "+c.type,1))})):c.send(JSON.stringify({tcnt:a.tcnt,type:"raw",action:"alert",message:"Login Success<br>Depending on your trustlevel services will be enabled"}),c),c.trusted=g[0]["class"]):
(logger("loginHandler:: ERROR wrong password ",1),a.action="login",a.message="Wrong Password",c.send(JSON.stringify(a))))})}
function sensorHandler(a,c){var b=addrSensor(a.address,a.channel);if(0>b)logger("sensorHandler:: ERROR unknown index for sensor: "+a.address+":"+a.channel,1);else{logger("sensorHandler index: "+b+" name: "+config.sensors[b].name,2);var d=config.sensors[b].name;void 0!==a.temperature&&config.sensors[b].sensor.hasOwnProperty("temperature")&&(config.sensors[b].sensor.temperature.val=a.temperature);void 0!==a.humidity&&config.sensors[b].sensor.hasOwnProperty("humidity")&&(config.sensors[b].sensor.humidity.val=
a.humidity);void 0!==a.airpressure&&config.sensors[b].sensor.hasOwnProperty("airpressure")&&(config.sensors[b].sensor.airpressure.val=a.airpressure);void 0!==a.altitude&&(config.sensors[b].sensor.altitude.val=a.altitude);void 0!==a.windspeed&&(config.sensors[b].sensor.windspeed.val=a.windspeed);void 0!==a.winddirection&&(config.sensors[b].sensor.winddirection.val=a.winddirection);void 0!==a.rainfall&&(config.sensors[b].sensor.rainfall.val=a.rainfall);void 0!==a.luminescense&&config.sensors[b].sensor.hasOwnProperty("liminescense")&&
(config.sensors[b].sensor.luminescense.val=a.luminescense);var e=rrdDir+"/db/"+d+".rrd",g=[];logger("sensorHandler:: index: "+b+", from: "+(void 0!==c&&null!==c?c.name:"datagram")+", name: "+d+", addr: "+a.address+", chan: "+a.channel+", temp: "+a.temperature,1);fs.existsSync(e)||(logger("sensorHandler:: rrdtool db "+e+" does not exist ... creating",1),createSensorDb(e,a,c));g+=void 0!==a.temperature?":"+Number(a.temperature):"";g+=void 0!==a.humidity?":"+Number(a.humidity):"";g+=void 0!==a.airpressure?
":"+Number(a.airpressure):"";g+=void 0!==a.altitude?":"+Number(a.altitude):"";g+=void 0!==a.windspeed?":"+Number(a.windspeed):"";g+=void 0!==a.winddirection?":"+Number(a.winddirection):"";g+=void 0!==a.rainfall?":"+Number(a.rainfall):"";g+=void 0!==a.luminescense?":"+Number(a.luminescense):"";b="rrdtool update "+e+" N"+g;logger("sensorHandler:: execStr: "+b,2);exec(b,function(b,d,c){null===b?logger("sensorHandler:: stdout: "+d+"; stderr: "+c,2):(logger("sensorHandler:: ERROR: for rrd str: "+g+"\n Rrd Error: "+
b+"; stderr: "+c,0),console.log("sensorHandler:: string: ",a))});broadcast(JSON.stringify(a),c,"raw")}}
function createSensorDb(a,c,b){var d=[];logger("createSensorDb:: ",1);d+=void 0!==c.temperature?"DS:temperature:GAUGE:600:-20:95 ":"";d+=void 0!==c.humidity?"DS:humidity:GAUGE:600:0:100 ":"";d+=void 0!==c.airpressure?"DS:airpressure:GAUGE:600:900:1100 ":"";d+=void 0!==c.altitude?"DS:altitude:GAUGE:600:-100:1200 ":"";d+=void 0!==c.windspeed?"DS:windspeed:GAUGE:600:0:200 ":"";d+=void 0!==c.winddirection?"DS:winddirection:GAUGE:600:0:359 ":"";d+=void 0!==c.rainfall?"DS:rainfall:GAUGE:600:0:25 ":"";d+=
void 0!==c.luminescense?"DS:luminescense:GAUGE:600:0:400 ":"";d+="RRA:AVERAGE:0.5:1:480 RRA:AVERAGE:0.5:5:672 ";d+="RRA:AVERAGE:0.5:20:744 ";d+="RRA:AVERAGE:0.5:480:365 ";d+="RRA:MIN:0.5:20:720 ";d+="RRA:MAX:0.5:20:720 ";d+="RRA:AVERAGE:0.5:20:720 ";a="rrdtool create "+a+" --step 180 "+d;logger("createSensorDb:: execStr: "+a,1);exec(a,function(a,d,f){null===a?(logger("createSensorDb:: ok, stdout: "+d+"; stderr: "+f,2),sensorHandler(c,b)):logger("createSensorDb:: ERROR: "+a+"; stderr: "+f)})}
function settingHandler(a,c){switch(a.cmd){case "store_config":logger("settingHandler:: store_config database name selected",1);break;case "load_config":logger("settingHandler:: load_config database name selected",1);break;case "list_config":logger("settingHandler:: list_config database name selected",1)}}
function socketHandler(a,c){var b=a+"",d=b.search(/\}{/);if(-1!=d){var e=b.substr(0,d+1),b=b.substr(d+1);logger("socketHandler:: string 1: "+e,2);logger("socketHandler:: string 2: "+b,2);socketHandler(e,c);socketHandler(b,c)}else{logger("socketHandler:: Starting with data: "+a,2);try{e=JSON.parse(b)}catch(g){logger("socketHandler:: JSON parse error: "+g,1);return}void 0==c&&(logger("socketHandler socket undefined. action: "+e.action,2),2<=debug&&console.log("data: ",b),c=null);logger("Handler:: Action: "+
e.action,2);switch(e.action){case "alarm":logger("socketHandler:: alarm received",1);break;case "console":consoleHandler(e.request,c);break;case "dbase":dbaseHandler(e.cmd,e.message,c);break;case "energy":energyHandler(e,c);break;case "graph":graphHandler(e,c);break;case "gui":"raw"==e.type&&icsHandler(e,c);"json"==e.type&&guiHandler(e,c);break;case "handset":"raw"==e.type&&icsHandler(e,c);"json"==e.type&&guiHandler(e,c);break;case "login":logger("socketHandler:: login message received");loginHandler(e,
c);break;case "load_database":logger("socketHandler:: load_database received",1);b={};0==c.trusted?(logger("socketHandler:: Socket is not trusted: "+c.name,1),b={tcnt:tcnt++,type:"raw",action:"login",message:"Please login first"}):(logger("socketHandler:: Socket is trusted: "+c.name,1),b={tcnt:tcnt++,type:"raw",action:"load_database",cmd:"",response:config});logger("socketHandler:: Sending "+b.action+" message to socket: "+c.name);c.send(JSON.stringify(b),function(a){void 0!==a&&(logger("socketHandler:: ERROR responding load database "+
a,1),logger("socketHandler:: Socket: "+c.name+", type: "+c.type,1))});break;case "ping":case "PING":logger("socketHandler:: ping received",2);b={tcnt:tcnt++,action:"ack",type:"raw",message:"OK"};"ws"==c.type&&c.send(JSON.stringify(b));break;case "scene":logger("socketHandler:: scene received",2);break;case "setting":logger("socketHandler:: setting received: "+e.cmd,2);settingHandler(e,c);break;case "user":logger("socketHandler:: user received",2);break;case "weather":logger("socketHandler:: weather received, type: "+
e.type+", addr:chan: "+e.address+":"+e.channel,1),e.action="sensor";case "sensor":sensorHandler(e,c);break;default:logger("SocketHandler:: action not recognized: "+e.action,1)}}}function queueScene(a){a=a.split(",");for(var c=0;c<a.length;c+=2){logger("queueScene item: "+c/2+", val: "+a[c]+", time: "+a[c+1],1);var b=a[c+1].split(":"),b=+(3600*b[0])+60*b[1]+b[2];logger("qinsert:: ticks: "+b+", name: "+a[c]+", seq: "+a[c],1);queue.qinsert({ticks:Number(b)+getTicks(),name:"gui",seq:a[c]})}}
function queueDevice(a,c,b,d,e){d=b.split(":");d=+(3600*d[0])+60*d[1]+d[2];e="!R"+config.devices[a].room+config.devices[a].id+("dimmer"==config.devices[a].type?"FdP":"F")+c;logger("queueDevice:: item: "+e+", dev: "+config.devices[a].name+", val: "+c+", time: "+b,1);queue.qinsert({ticks:Number(d)+getTicks(),name:"gui",seq:e})}
var queue=new function(){this.qlist=[];this.qpush=function(a){a={ticks:getTicks(),name:a.name,seq:a.seq};this.qlist.push(a)};this.qinsert=function(a){var c;for(c=0;c<this.qlist.length&&!(this.qlist[c].ticks>a.ticks);c++);this.qlist.splice(c,0,a)};this.qpop=function(){var a,c=getTicks();for(a=0;a<this.qlist.length&&!(this.qlist[a].ticks>c);a++);return this.qlist.splice(0,a)};this.qprint=function(){var a=getTicks(),c=queue.qtim();if(null!=c)for(logger("print queue for ticks: "+a+", next runnable: "+
c+" secs",1),a=0;a<this.qlist.length;a++)console.log("\t\t",this.qlist[a])};this.qtim=function(){if(0==this.qlist.length)return null;var a=getTicks();return this.qlist[0].ticks-a}};
function queueHandler(){for(var a=queue.qpop();null!=a&&0<a.length;){2<=debug&&console.log("queueHandler:: pop task: ",a);for(var c=0;c<a.length;c++){var b;1<=debug&&console.log("\t\tqueueHandler:: processing task: ",a[c]);switch(a[c].name){case "gui":b=a[c].seq.split(",");break;default:b=findScene(a[c].name),b=config.scenes[b].seq.split(",")}for(var d=0;d<b.length;d+=2)var e={tcnt:""+tcnt++,type:"raw",action:"gui",cmd:"",gaddr:"",uaddr:"",val:"",message:b[d]};socketHandler(JSON.stringify(e))}a=queue.qpop()}2<=
debug&&queue.qprint()}function ruleHandler(){for(var a=0;a<config.rules.length;a++)if("Y"==config.rules[a].active){logger("ruleHandler:: rule "+config.rules[a].name+" is active",1);try{logger("ruleHandler:: eval: "+config.rules[a].jrule,1),eval(config.rules[a].jrule)}catch(c){logger("ruleHandler:: Error evaluating rule "+config.rules[a].name+", error: "+c,1)}}else logger("ruleHandler:: rule "+config.rules[a].name+" not active",3);logger("ruleHandler:: Ended",2)}logger("MAIN part started",1);
async.series([function(a){connectDbase(a)},function(a){zwave_init(function(c,b){a(null,b)})},function(a){loadDbase(a)}],function(a,c){main(a,c)});function start_loops(){loops=[];logger("All Init functions done",1);alarm_loop();timer_loop();poll_loop();zwave_loop()}function main(a,c){1<=debug&&console.log("Return values: \n",c);userver.bind(udpPort);logger("Starting Loops");start_loops();logger("Starting Static Webserver");app.use(serveStatic(__dirname+"/www"));app.listen(webPort)}
function timer_loop(){logger("Starting timer_loop",1);var a=setInterval(function(){var a=new Date,b=Math.floor(a.getTime()/1E3);logger("Loop 0, ticks: "+b+", devices: "+Object.keys(devices).length,2);logger("----------- TIMER EXPIRED? ------------",1);queryDbase("SELECT * from timers",function(d,e){config.timers=e;logger("timer_loop:: #timers: "+e.length,2);queryDbase("SELECT * from scenes",function(d,f){config.scenes=f;logger("timer_loop:: now   date: "+a,1);for(var h=SunCalc.getTimes(a,52.13,5.58),
k=0;k<e.length;k++){var l=e[k].tstart.split(":"),m=l[0],n=l[1],l=e[k].startd.split("/"),p=l[0],t=l[1],q=Number(l[2])+2E3,l=e[k].endd.split("/"),w=l[0],A=l[1],l=Number(l[2])+2E3,r,v,x,y,z,u;x=a.getDate();y=a.getMonth();z=a.getFullYear();switch(m){case "96":u=1800*-Number(n);r=h.sunrise.getHours();v=h.sunrise.getMinutes();break;case "97":u=1800*Number(n);r=h.sunrise.getHours();v=h.sunrise.getMinutes();break;case "98":u=1800*-Number(n);r=h.sunset.getHours();v=h.sunset.getMinutes();break;case "99":u=
1800*Number(n);r=h.sunset.getHours();v=h.sunset.getMinutes();break;default:u=0,r=m,v=n}r=Math.floor((new Date(z,y,x,r,v,0,0)).getTime()/1E3)+u;logger("Timer correction is: "+u,2);logger("timer_loop:: run   date: "+r,2);logger("timer_loop:: now   date: "+b,2);0<r-b&&logger("timer_loop:: name: "+e[k].name+", runnable in: "+(r-b)+" secs",1);if(b<r)logger("Timer not yet started ",2);else if(w=Math.floor((new Date(l,A-1,w,0,0,0,0)).getTime()/1E3),logger("timer_loop:: end date:   "+w,2),b>w)logger("Timer enddate reached: "+
w,1);else if(m=Math.floor((new Date(q,t-1,p,m,n,0,0)).getTime()/1E3),logger("timer_loop:: start date: "+m,2),b<m)logger("Timer before start date",1);else if(b-r>timer_interval/500+1)logger("Timer already started some time ago",2);else if(b-r>timer_interval/1E3)logger("Timer already started",2);else if("x"==e[k].months[Number(a.getMonth())-1])logger("Timer, this is a blackout month",1);else if("x"==e[k].days[Number(a.getDay())-1])logger("Timer, this is a blackout day",1);else for(logger("timer_loop:: Starting timer name: "+
e[k].name,1),m=0;m<config.scenes.length;m++)if(f[m].name==e[k].scene)for(n=f[m].seq.split(","),p=0;p<n.length;p+=2)logger("scene item: "+p/2+", val: "+n[p]+", time: "+n[p+1],1),t=n[p+1].split(":"),t=+(3600*t[0])+60*t[1]+t[2],logger("qinsert:: ticks: "+t+", name: "+f[m].name+", seq: "+n[p],1),queue.qinsert({ticks:Number(t)+getTicks(),name:"gui",seq:n[p]})}})})},timer_interval);loops.push(a)}
function zwave_loop(){logger("Starting zwave_loop");var a=0,c=setInterval(function(){2<=debug&&(logger("----------- ACTIVE CLIENTS ------------",1),logger("Active socket Clients:: ",1),clients.forEach(function(a){console.log(a.type+" Client: "+a.name)}));logger("----------- ACTIVE ZWAVE DEVICES ------------",1);zwave_init(function(a,b){logger("zwave_loop:: zwave_init: "+b,1)});var b=Math.floor(Date.now()/1E3);logger("Loop "+a+", ticks: "+b+", devices: "+Object.keys(devices).length,2);Object.keys(devices).forEach(function(a){if(1<
a){logger("key: "+a,1);var b=devices[a].instances[0].commandClasses;2<debug&&console.log(b);Object.keys(b).forEach(function(c){switch(c){case "37":var f=b[c].data.level.value+0,h=b[c].data.level.updateTime,k=b[c].data.level.invalidateTime;logger("\tCl: "+c+" Switch           , val "+f+", upd: "+printTime(1E3*h)+", inval: "+printTime(1E3*k),1);break;case "38":f=b[c].data.level.value+0;h=b[c].data.level.updateTime;k=b[c].data.level.invalidateTime;logger("\tCl: "+c+" Dimmer           , val "+f+", upd: "+
printTime(1E3*h)+", inval: "+printTime(1E3*k),1);break;case "39":logger("\tCl: "+c+" Dimmer?          , val "+f,2);break;case "48":if(0==b[c].data.interviewDone.value){logger("WARNING:: Device "+c+" Dead",1);break}f=b[c].data[1].level.value+0;h=b[c].data[1].level.updateTime;logger("\tCl: "+c+" PIR              , val "+f+", upd: "+printTime(1E3*h),1);break;case "49":if(0==b[c].data.interviewDone.value){logger("WARNING:: Device "+c+" Dead",0);break}h={tcnt:""+tcnt++,action:"sensor",type:"json",address:a+
"",channel:"0"};1 in b[c].data&&(f=b[c].data[1].val.value+0,logger("\tCl: "+c+" Temp             , val "+f,1),k=addrSensor(a,0),config.sensors[k].sensor.temperature.val=f,h.temperature=f);3 in b[c].data&&(f=b[c].data[3].val.value+0,logger("\tCl: "+c+" Lumi             , val "+f,1),k=addrSensor(a,0),config.sensors[k].sensor.luminescense.val=f,h.luminescense=f);5 in b[c].data&&(f=b[c].data[5].val.value+0,logger("\tCl: "+c+" Humi             , val "+f,1),k=addrSensor(a,0),config.sensors[k].sensor.humidity.val=
f,h.humidity=f);logger("zwave_loop:: starting sensor handler for device: "+a,2);sensorHandler(h);break;case "67":if(0==b[c].data.interviewDone.value){logger("WARNING: Thermostat device "+a+" Dead",0);break}f=b[c].data[1].val.value+0;logger("\tCl: "+c+" Thermostat       , val "+f,1);break;case "112":logger("\tCl: "+c+" Configuration",2);break;case "128":f=b[c].data.last.value;h=b[c].data.last.updateTime;logger("\tCl: "+c+" Battery         , "+f+"%, upd: "+printTime(1E3*h),1);break;case "132":logger("\tCl: "+
c+" Wakeup",2);break;case "133":logger("\tCl: "+c+" Association",2);break;case "142":logger("\tCl: "+c+" MultiCh Assoc",2);break;case "143":logger("\tCl: "+c+" MultiCh Assoc",2);break;case "156":logger("\tCl: "+c+" Alarm Sensor",1);break;default:logger("\tCl: "+c+" Device not yet handled",2)}})}});a++},log_interval);loops.push(c)}
function poll_loop(){logger("Starting poll_loop");var a=setInterval(function(){logger("-----------       POLL      ------------",1);connection.query("SELECT * from devices",function(a,b,d){if(a)throw a;config.devices=b;3<=debug&&console.log("query devices:: is: \n",b);for(a=0;a<config.devices.length;a++)"868"==config.devices[a].gaddr&&deviceGet(a,config.devices[a].type)})},poll_interval);loops.push(a)}
function alarm_loop(){logger("Starting alarm_loop",1);var a=0,c=setInterval(function(){var b=Math.floor(Date.now()/1E3);zwave_upd_options.path="/ZWaveAPI/Data/"+(b-alarm_interval);logger("alarm_loop:: zTime: "+(b-alarm_interval),2);http.request(zwave_upd_options,zwave_upd_cb).end();!0===devices[9].instances[0].commandClasses[48].data[1].level.value&&(console.log("Fibaro ALARM"),b={tcnt:868,type:"json",action:"alarm",scene:"Living on",message:"Fibaro ALARM"},0==a&&(a=1,broadcast(JSON.stringify(b),
null),logger("FIBARO ALARM",0),setTimeout(function(){a=0},24E4)));!0===devices[11].instances[0].commandClasses[48].data[1].level.value&&(console.log("Aeon ALARM"),b={tcnt:868,type:"json",action:"alarm",scene:"",message:"AEON ALARM"},0==a&&(a=1,broadcast(JSON.stringify(b),null),logger("AEON ALARM",0),setTimeout(function(){a=0},24E4)),logger("AEON ALARM",0));logger("----------- QUEUE HANDLER -------------",2);queueHandler();logger("----------- RULES HANDLER -------------",2);ruleHandler()},alarm_interval);
loops.push(c)};