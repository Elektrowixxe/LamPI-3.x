var debug=1,poll_interval=6E3,log_interval=12E4,alarm_interval=2E3,timer_interval=3E4,webPort=8080,sockPort=5E3,udpPort=5001,tcpPort=5002,tcnt=0,zroot={},devices={},clients=[],loops=[],config={},lampi_admin=[],par=require("./config/params"),mysql=require("mysql");console.log("mySQL loaded");var fs=require("fs");console.log("fs loaded");var strip=require("strip-json-comments");console.log("strip-json-comments loaded");var logDir=par.homeDir+"/log",rrdDir=par.homeDir+"/rrd",wwwDir=par.homeDir+"/www";
function logger(a,b){b=b||debug;if(debug>=b){var d=new Date,d=("00"+(d.getMonth()+1)).slice(-2)+"/"+("00"+d.getDate()).slice(-2)+"/"+d.getFullYear()+" "+("00"+d.getHours()).slice(-2)+":"+("00"+d.getMinutes()).slice(-2)+":"+("00"+d.getSeconds()).slice(-2);console.log("["+d+"] "+a)}}Array.prototype.contains=function(a){return-1<this.indexOf(a)};
process.argv.forEach(function(a,b,d){if(2>b)logger("process.argv["+b+"] skipping: "+a);else switch(a){case "-i":logger("Calling init",1);for(a=0;a<loops.length;a++)clearInterval(loops[a]);logger("Suspending "+loops.length+" timers");config=readConfig();createDbase(function(a,b){a?logger("init:: ERROR: "+a):(logger("init:: createDbase returned "+b,1),Object.keys(config).forEach(function(a){logger("createDbase: "+a+", length: "+config[a].length)}),logger("init:: Starting loadDbase"),loadDbase(function(a,
b){null==a&&logger("init:: loadDbase returned successful "+b,1);var d="";Object.keys(config).forEach(function(a){logger("loadDbase: "+a+", length: "+config[a].length);for(j=0;j<config[a].length;j++)d+=""+a+","+j+": "+config[a][j].name+"<br>";d+="<br>"});d+="<br>init:: done, restarting loops";logger(d,2);start_loops()}))});break;case "-r":var c="";for(a=0;a<loops.length;a++)clearInterval(loops[a]);config=readConfig();logger("reload:: read config #: "+config.length,1);loadDbase(function(a,b){null==
a&&logger("init:: loadDbase returned successful "+b,1);Object.keys(config).forEach(function(a){logger("loadDbase: "+a+", length: "+config[a].length);for(j=0;j<config[a].length;j++)c+=""+a+","+j+": "+config[a][j].name+"<br>";c+="<br>"});c+="<br>init:: done, restarting loops";logger(c,2);start_loops()});break;default:logger("Process argv:: Unknown commandline argument "+a,1)}});var http=require("http");console.log("http loaded");var net=require("net");console.log("net loaded");var dgram=require("dgram");
console.log("dgram loaded");var express=require("express");console.log("express loaded");var async=require("async");console.log("ssync loaded");var S=require("string");console.log("string loaded");var exec=require("child_process").exec;console.log("child_process loaded");var serveStatic=require("serve-static");console.log("serve-static loaded");var WebSocketServer=require("ws").Server;console.log("ws loaded");var SunCalc=require("suncalc");console.log("suncalc loaded");var alarmRouter=require("./modules/alarmRouter");
console.log("alarmRouter loaded");var woonveilig=require("./modules/woonveilig");console.log("woonveilig loaded");console.log("All required modules loaded");var app=express();
app.all("/init",function(a,b,d){logger("Accessing the init section ...",1);var c="",c=c+"init started<br>",c=c+("Suspending "+loops.length+" timers<br>");for(a=0;a<loops.length;a++)clearInterval(loops[a]);config=readConfig();createDbase(function(a,d){a?logger("init:: ERROR: "+a):(logger("init:: createDbase returned "+d,1),logger("init:: Starting loadDbase"),loadDbase(function(a,d){null==a&&logger("init:: loadDbase returned successful "+d,1);c+=printConfig();c+="<br>init:: done, restarting loops";
logger(c,2);b.send(c);start_loops()}))})});
app.all("/load",function(a,b,d){logger("Accessing the reload section ...",1);var c="",c=c+"reload started<br>",c=c+("Suspending "+loops.length+" timers<br>");for(a=0;a<loops.length;a++)clearInterval(loops[a]);config=readConfig();loadDbase(function(a,d){null==a&&logger("load:: loadDbase returned successful "+d,1);Object.keys(config).forEach(function(a){logger("load::: "+a+", length: "+config[a].length);for(j=0;j<config[a].length;j++)c+=""+a+","+j+": "+config[a][j].name+"<br>";c+="<br>"});c+="<br>load:: done, restarting loops";
logger(c,2);b.send(c);start_loops()})});app.all("/sensors",function(a,b,d){console.log("Accessing the sensors section ...");b.send("sensors")});app.all("/config",function(a,b,d){console.log("Printing configuration ...");b.send(printConfig())});app.use("/alarm",alarmRouter);function readConfig(){var a=fs.readFileSync(par.homeDir+"/config/database.cfg","utf8"),a=JSON.parse(strip(a));3<=debug&&(logger("readConfig:: config read: ",3),console.log(a));return a}
function writeConfig(a){logger("writeConfig:: wrinting configuration to file "+a,1);var b=JSON.stringify(config);fs.writeFileSync(a,b)}
function printConfig(){var a="";Object.keys(config).forEach(function(b){logger("loadDbase: "+b+", length: "+config[b].length);a+="<table>";for(j=0;j<config[b].length;j++){a+="<tr>";a+="<td>"+b+"["+j+"]</td>";a+="<td>: "+config[b][j].name+"</td>";a+="<td>, id: "+config[b][j].id+"</td>";switch(b){case "devices":a+="<td>, room: "+config[b][j].room+"</td>";a+="<td>, gaddr: "+config[b][j].gaddr+"</td>";a+="<td>, uaddr: "+config[b][j].uaddr+"</td>";a+="<td>, type: "+config[b][j].type+"</td>";a+="<td>, val: "+
config[b][j].val+"</td>";break;case "scenes":a+="<tr><td>";for(var d=config[b][j].seq.split(","),c=0;c<d.length;c+=2){a+="<tr><td>";a+="<td>, ics: "+d[c]+"</td>";a+="<td>, time: "+d[c+1]+"</td>";var e=/\d+/,f=d[c].match(e);if(-1!=d[c].indexOf("Fa"))0<=idRoom(f)&&(a+="<td>, Room "+config.rooms[idRoom(f)].name+" All Off</td>");else{var g=d[c].indexOf("D"),e=d[c].substr(g+1,2).match(e),f=findDevice(f,e);a=0<=f?a+("<td>, "+config.devices[f].name+"</td>"):a+"<td>, CHECK THE DEVICE, MAY NOT EXTIST</td>"}}logger(" ");
break;case "timers":a+="<td>, scene: "+config[b][j].scene+"</td>";a+="<td>, tstart: "+config[b][j].tstart+"</td>";a+="<td>, startd: "+config[b][j].startd+"</td>";a+="<td>, endd: "+config[b][j].endd+"</td>";break;case "sensors":a+="<td>, addr: "+config[b][j].address+"</td>";a+="<td>, chan: "+config[b][j].channel+"</td>";a+="<td>, loc: "+config[b][j].location+"</td>";a+="<td>, brand: "+config[b][j].brand+"</td>";config[b][j].sensor.hasOwnProperty("temperature")&&(a+="<td>, temp: "+config[b][j].sensor.temperature.val+
"</td>");config[b][j].sensor.hasOwnProperty("humidity")&&(a+="<td>, humi: "+config[b][j].sensor.humidity.val+"</td>");config[b][j].sensor.hasOwnProperty("airpressure")&&(a+="<td>, press: "+config[b][j].sensor.airpressure.val+"</td>");break;case "rules":a+="<td>, active: "+config[b][j].active+"</td>",a+="<tr><td>",a+="<td colspan='3'>, jrule: "+JSON.stringify(config[b][j].jrule)+"</td>",a+="<tr><td>",a+="<td colspan='3'>, brule: "+JSON.stringify(config[b][j].brule)+"</td>",console.log("rule stringify "+
j+": ",JSON.stringify(config[b][j]))}a+="</tr>"}a+="<br></table>"});a+="<table>";Object.keys(par).forEach(function(b){a+="<tr>";a+="<td>"+b+"</td>";a+="<td>: "+par[b]+"</td>";a+="</tr>"});return a+="<br></table>"}
function zwave_init(a){var b=http.request({host:par.zHost,path:"/ZWaveAPI/Data/0",port:"8083",method:"GET",headers:{"Content-Type":"application/json"}},function(b){var c="";b.on("data",function(a){c+=a});b.on("end",function(){3<=debug&&console.log(c);zroot=JSON.parse(c);devices=zroot.devices;logger("Successfully read Z-Wave Data, #devices: "+Object.keys(devices).length,1);a(null,"zwave_init done")})});b.on("error",function(b){logger("zwave_init:: ERROR opening connection to zwave host, "+b.message,
1);a("zwave no connection",null)});b.end()}
var zwave_upd_options={host:par.zHost,path:"/ZWaveAPI/Data/"+(Math.floor(Date.now()/1E3)-alarm_interval),port:"8083",method:"GET",headers:{"Content-Type":"application/json"}},zwave_upd_cb=function(a){var b="";a.on("data",function(a){b+=a});a.on("end",function(){3<=debug&&console.log(b);var a=JSON.parse(b);Object.keys(a).forEach(function(b){for(var e=zroot,f=b.split("."),g=g;g<f.length-1;g++)pe=f[g],e=e[f[pe]];void 0===e&&logger("pobj is null line 340, "+f.slice(-1),1);e[f.slice(-1)]=a[b]});logger("Successfully read the Z-Wave Data stucture, Read "+
Object.keys(a).length+" records",2)})};
function broadcast(a,b,d){logger("broadcast:: message: "+a,2);var c=[],e=[];clients.forEach(function(b){e.push(b);c.push(function(b){setTimeout(function(){var c=e.shift();if(void 0!=d&&0<=d.indexOf(c.type))logger("broadcast:: Masking for socket: "+c.name+", type: "+c.type,3),b(null,c.name+"-masked");else switch(c.type){case "raw":logger("Broadcast to Rawsocket: "+c.name,2);1!=c.write(a)?(logger("broadcast:: raw socket error",1),b("broadcast raw error",null)):(logger("broadcast :: raw client: "+c.name,
3),b(null,c.name));break;case "ws":c.send(a,function(a){a?(logger("broadcast:: ws send error: "+a,1),b(a,null)):(logger("broadcast :: web client: "+c.name,3),b(null,c.name))});break;default:logger("broadcast:: unknown type: "+c.type,2),b("broadcast:: Unknown type: "+c.type,null)}},300)})});async.series(c,function(a,b){a?logger("broadcast:: ERROR ERROR: "+a,1):logger("broadcast:: finished, results: "+b,2)})}
var HOST="0.0.0.0",server=net.createServer(function(a){a.name=a.remoteAddress+":"+a.remotePort;a.type="raw";a.trusted=1;logger("SOCKET:: socket server connected to: "+a.name,1);clients.push(a);a.on("end",function(){logger("SOCKET:: socket server "+a.name+" disconnected",1);clients.splice(clients.indexOf(a),1)});a.on("text",function(a){logger("SOCKET:: socket server received text: "+a,1)});a.on("data",function(b){logger("SOCKET:: socket data received: "+b+", trusted: "+a.trusted,2);socketHandler(b,
a)});a.on("message",function(b){logger("SOCKET:: socket message received: "+b,2);socketHandler(b,a)});a.on("upgrade",function(a,d,c){logger("SOCKET:: socket upgrade received: "+a,1);d.write(JSON.stringify({tcnt:868,type:"json",action:"alarm",scene:"",message:"NODE ALARM"}))});a.on("error",function(a){logger("SOCKET:: Error: "+a,1)});a.on("connect",function(){logger("SOCKET:: socket Connection Established ",1)})});
server.listen(tcpPort,HOST,function(){logger("TCP server listening to addr:port: "+HOST+":"+tcpPort)});function checkIP(a){a=a.split(".");a[0]=a[0].split("//")[1];var b=par.thisHost.split(".");if(b[0]==a[0]&&b[1]==a[1]&&b[2]==a[2])return logger("checkIP:: client is from local network",1),1;logger("checkIP:: client is from remote network: "+a[0]+" "+a[1]+" "+a[2],1);return 0}var wss=new WebSocketServer({port:sockPort});
wss.on("connection",function(a){a.name=a.upgradeReq.headers.origin;a.type="ws";a.trusted=checkIP(a.upgradeReq.headers.origin);logger("WS:: new socket connected: "+a.name,1);clients.push(a);a.on("message",function(b){2<=debug&&console.log("WS rcv msg, trusted: "+a.trusted+": %s",b);socketHandler(b,a)});a.on("close",function(){logger("WS:: socket "+a.name+" disconnected",1);clients.splice(clients.indexOf(a),1)})});var userver=dgram.createSocket("udp4");
userver.on("error",function(a){console.log("UDP server error:\n"+a.stack);userver.close()});userver.on("message",function(a,b){logger("UDP message from "+b.address+":"+b.port,2);logger("UDP server  msg: "+a,3);b.name=b.address+":"+b.port;b.type="udp";socketHandler(a,b)});userver.on("listening",function(){var a=userver.address();logger("UDP server listening to addr:port: "+a.address+":"+a.port,1)});var connection=mysql.createConnection({host:par.dbHost,user:par.dbUser,password:par.dbPassword,database:"LamPI"});
function connectDbase(a){connection.connect(function(b){b?(logger("ERROR:: Connecting to the MySQL Database, make sure database exists and permissions are OK",1),logger("connectDbase:: err: "+b,1),a("connectDbase error","null")):(logger("Connected to the MySQL Database",1),a(null,"mysql connected"))})}
function queryDbase(a,b){var d=connection.query(a,function(a,e,f){a?(console.log("queryDbase:: err: "+a+", query: <"+d.sql+">"),b("queryDbase err: "+a,null)):(3<=debug&&console.log("queryDbase:: is: \n",e),b(null,e))})}function insertDb(a,b,d){var c=connection.query("INSERT INTO "+a+" SET ?",b,function(a,b){a?(console.log("insertDb:: err: "+a+", query ",c.sql),d("Error: "+a,null)):(3<=debug&&console.log("insertDb success:: result: \n",b),d(null,b))})}
function updateDb(a,b,d){var c=connection.query("UPDATE "+a+" SET ? WHERE id=?",[b,b.id],function(a,b){a?(console.log("updateDb:: err: "+a+", query ",c.sql),d(a,b)):(3<=debug&&console.log("updateDb success:: result: \n",b),d(null,b))})}function deleteDb(a,b,d){var c=connection.query("DELETE FROM "+a+" WHERE id=?",b.id,function(a,b){a?(console.log("deleteDb:: err: "+a+", query ",c.sql),d(a,b)):(3<=debug&&console.log("deleteDb success:: result: \n",b),d(null,b))})}
function delDevDb(a,b,d){var c=connection.query("DELETE FROM "+a+" WHERE id=? and room=?",[b.id,b.room],function(a,b){a?(console.log("delDevDb:: err: "+a+", query ",c.sql),d(a,b)):(3<=debug&&console.log("deleteDb success:: result: \n",b),d(null,b))})}
function updDevDb(a,b,d){var c=connection.query("UPDATE "+a+" SET ? WHERE id=? AND room=?",[b,b.id,b.room],function(a,b){a?(console.log("updDevDb:: err: "+a+", query ",c.sql),d(a,b)):(3<=debug&&console.log("updDevDb success:: result: \n",b),d(null,b))})}
function createDbase(a){async.series([function(a){queryDbase("CREATE TABLE IF NOT EXISTS users(id INT, descr CHAR(128), type CHAR(32), name CHAR(20), login CHAR(20), passw CHAR(32), class INT )",function(d,c){var e=[];d?a(d,null):queryDbase("SELECT * FROM users",function(c,d,h){if(c)a(c,null);else if(0==d.length){for(d=0;d<config.users.length;d++)insertDb("users",config.users[d],function(a){e.push("u")});a(c,"uers made, sizeof users is:  "+config.users.length)}else logger("createDbase:: WARNING: There are already users in the user table"),
a(c,"existing users")})})},function(a){queryDbase("DROP TABLE IF EXISTS rooms",function(d,c){queryDbase("CREATE TABLE rooms(id INT, descr CHAR(128), name CHAR(20) )",function(c,d){a(c,"rooms made")})})},function(a){queryDbase("DROP TABLE IF EXISTS devices",function(d,c){queryDbase("CREATE TABLE devices(id CHAR(3), descr CHAR(128), uaddr CHAR(3), gaddr CHAR(12), room CHAR(12), name CHAR(20), type CHAR(32), val INT, lastval INT, brand CHAR(20) )",function(c,d){a(c,"devices made")})})},function(a){queryDbase("DROP TABLE IF EXISTS scenes",
function(d,c){queryDbase("CREATE TABLE scenes(id INT, descr CHAR(128), val INT, name CHAR(20), type CHAR(32), seq CHAR(255) )",function(c,d){a(c,"scenes made")})})},function(a){queryDbase("DROP TABLE IF EXISTS timers",function(d,c){queryDbase("CREATE TABLE timers(id INT, descr CHAR(128), name CHAR(20), type CHAR(32), scene CHAR(20), tstart CHAR(20), startd CHAR(20), endd CHAR(20), days CHAR(20), months CHAR(20), skip INT )",function(c,d){a(c,"timers made")})})},function(a){queryDbase("DROP TABLE IF EXISTS handsets",
function(d,c){queryDbase("CREATE TABLE handsets(id INT, descr CHAR(128), name CHAR(20), brand CHAR(20), addr CHAR(20), unit INT, val INT, type CHAR(20), scene CHAR(255) )",function(c,d){a(null,"handsets made")})})},function(a){queryDbase("DROP TABLE IF EXISTS settings",function(d,c){queryDbase("CREATE TABLE settings(id INT, descr CHAR(128), val CHAR(128), name CHAR(20) )",function(c,d){a(null,"settings made")})})},function(a){queryDbase("DROP TABLE IF EXISTS controllers",function(d,c){queryDbase("CREATE TABLE controllers(id INT, descr CHAR(128), name CHAR(20), fname CHAR(128) )",
function(c,d){a(null,"controllers made")})})},function(a){queryDbase("DROP TABLE IF EXISTS brands",function(d,c){queryDbase("CREATE TABLE brands(id INT, descr CHAR(128), name CHAR(20), fname CHAR(128) )",function(c,d){a(null,"brands made")})})},function(a){queryDbase("DROP TABLE IF EXISTS sensors",function(d,c){queryDbase("CREATE TABLE sensors(id INT, descr CHAR(128), name CHAR(20), room CHAR(12), location CHAR(20), brand CHAR(20), address CHAR(20), channel CHAR(8), type CHAR(32), caps CHAR(64), sensor CHAR(255) )",
function(c,d){a(null,"sensors made")})})},function(a){queryDbase("DROP TABLE IF EXISTS rules",function(d,c){queryDbase("CREATE TABLE rules(id INT, descr CHAR(128), name CHAR(20), type CHAR(32), active CHAR(1), jrule TEXT(65000), brule TEXT(65000) )",function(c,d){a(null,"rules made")})})},function(a){var d=[];logger("createDb starting for devices, #devices: "+config.devices.length);for(var c=0;c<config.devices.length;c++)insertDb("devices",config.devices[c],function(a,b){d.push("d")});a(null,"devices: "+
d)},function(a){var d=[];logger("createDb starting for rooms, #rooms: "+config.rooms.length);for(var c=0;c<config.rooms.length;c++)insertDb("rooms",config.rooms[c],function(a){d.push("r")});a(null,"fill rooms"+config.rooms.length)},function(a){for(var d=[],c=0;c<config.scenes.length;c++)insertDb("scenes",config.scenes[c],function(a){d.push("s")});a(null,"scenes: "+d)},function(a){for(var d=[],c=0;c<config.timers.length;c++)insertDb("timers",config.timers[c],function(a){d.push("t")});a(null,"timers: "+
d)},function(a){for(var d=[],c=0;c<config.handsets.length;c++)insertDb("handsets",config.handsets[c],function(a){d.push("h")});a(null,"handsets: "+d)},function(a){for(var d=[],c=0;c<config.settings.length;c++)insertDb("settings",config.settings[c],function(a){d.push("x")});a(null,"settings: "+d)},function(a){for(var d=[],c=0;c<config.controllers.length;c++)insertDb("controllers",config.controllers[c],function(a){d.push("c")});a(null,"controllers: "+d)},function(a){for(var d=[],c=0;c<config.brands.length;c++)insertDb("brands",
config.brands[c],function(a){d.push("b")});a(null,"brands: "+d)},function(a){for(var d=[],c=0;c<config.rules.length;c++){var e=config.rules[c];e.jrule=JSON.stringify(config.rules[c].jrule);e.brule=JSON.stringify(config.rules[c].brule);insertDb("rules",e,function(a){d.push("s")})}a(null,"rules: "+d)},function(a){for(var d=[],c=0;c<config.sensors.length;c++){var e=config.sensors[c];e.sensor=JSON.stringify(config.sensors[c].sensor);insertDb("sensors",e,function(a){d.push("w")})}a(null,"sensors: "+d)}],
function(b,d){b?(logger("createDbase:: ERROR: "+b),a(b,d)):(logger("createDbase:: Databases created, result: ",1),console.log(d),a(null,d))})}
function loadDbase(a){async.series([function(a){queryDbase("SELECT * from devices",function(d,c){if(d)logger("loadDbase:: ERROR reading devices table, "+d,1),a("loadDbase ERROR reading devices",null);else{config.devices=c;for(var e=0;e<config.devices.length;e++)"868"==config.devices[e].gaddr&&(lampi_admin[config.devices[e].uaddr]={val:config.devices[e].val,checks:3});a(null,"devices "+c.length)}})},function(a){queryDbase("SELECT * from rooms",function(d,c){config.rooms=c;a(null,"rooms "+c.length)})},
function(a){queryDbase("SELECT * from scenes",function(d,c){config.scenes=c;a(null,"scenes "+c.length)})},function(a){queryDbase("SELECT * from timers",function(d,c){config.timers=c;a(null,"timers "+c.length)})},function(a){queryDbase("SELECT * from settings",function(d,c){config.settings=c;a(null,"settings "+c.length)})},function(a){queryDbase("SELECT * from brands",function(d,c){config.brands=c;a(null,"brands "+c.length)})},function(a){queryDbase("SELECT * from handsets",function(d,c){config.handsets=
c;a(null,"handsets "+c.length)})},function(a){queryDbase("SELECT * from rules",function(d,c){if(null===c)logger("loadDbase:: select rules returns 0",1),a("loadDbase rules error",null);else{for(var e=0;e<c.length;e++){try{c[e].jrule=JSON.parse(c[e].jrule)}catch(f){logger("JSON error parsing jrule",1),console.log(f),a("loadDbase jrule error",null)}try{c[e].brule=JSON.parse(c[e].brule)}catch(g){logger("JSON error parsing brule",1),console.log(g),a("loadDbase brule error",null)}}config.rules=c;a(null,
"rules "+c.length)}})},function(a){queryDbase("SELECT * from sensors",function(d,c){if(null===c)logger("loadDbase:: select sensors returns 0",1),a("loadDbase sensors error",null);else{config.sensors=c;for(var e=0;e<c.length;e++)c[e].sensor=JSON.parse(c[e].sensor);a(null,"sensors "+c.length)}})},function(a){queryDbase("SELECT * from controllers",function(d,c){config.controllers=c;a(null,"controllers "+c.length)})}],function(b,d){a(null,d)})}
function deviceSet(a,b){var d=config.devices[a].uaddr,c=config.devices[a].type,e=Math.floor(99*b/32),f={host:par.zHost,path:"",port:"8083",method:"GET",headers:{"Content-Type":"application/json"}};callSet=function(a){a.on("data",function(a){logger("WARNING deviceSet received data: "+a,2)});a.on("end",function(){logger("deviceSet has ended",2)});a.on("error",function(){logger("deviceSet ERROR Updating dev: "+d+"",1)})};logger("deviceSet:: setting zdev: "+d+" to "+b,1);switch(c){case "dimmer":f.path=
"/ZWaveAPI/Run/devices["+d+"].instances[0].commandClasses[38].Set("+e+")";break;case "switch":f.path="/ZWaveAPI/Run/devices["+d+"].instances[0].commandClasses[37].Set("+e+")";break;case "thermostat":f.path="/ZWaveAPI/Run/devices["+d+"].instances[0].commandClasses[67].ThermostatSetPoint.Set(1,"+e+")";break;default:logger("deviceSet:: Unknown type "+c)}c=http.request(f,callSet);c.on("error",function(a){logger("deviceSet:: ERROR making connection to zwave host, "+a.message,1)});c.end()}
function deviceGet(a,b){var d=config.devices[a].uaddr,c=config.devices[a].val,e=lampi_admin[d].val,f,g=http.request({host:par.zHost,path:"/ZWaveAPI/Run/devices["+d+"].Basic.Get()",port:"8083",method:"GET",headers:{"Content-Type":"application/json"}},function(g){g.on("data",function(a){logger("ERROR deviceGet received data: "+a,3)});g.on("end",function(){logger("deviceGet:: device: "+d+", lampi dev index: "+a,2);switch(b){case "switch":if(0==devices[d].instances[0].commandClasses[37].data.interviewDone.value){console.log("ERROR:: Switch device "+
d+" Dead");return}f=devices[d].instances[0].commandClasses[37].data.level.value+0;break;case "dimmer":if(!1===devices[d].instances[0].commandClasses[38].data.interviewDone.value){console.log("ERROR:: Dimmer device "+d+" Dead");return}f=Math.ceil(devices[d].instances[0].commandClasses[38].data.level.value/99*32);break;case "thermostat":if(!1===devices[d].instances[0].commandClasses[67].data.interviewDone.value){logger("ERROR:: Thermostat device "+d+" Dead",2);return}f=devices[d].instances[0].commandClasses[67].data[1].val.value;
return;default:logger("ERROR lampi type not supported: "+b);return}logger("Dev: "+d+", lVal: "+c+", aVal: "+e+", zVal: "+f,2);if(f==c&&e==c)logger("X X X, all values of device "+d+" are equal",3);else if(f==c&&e!=c)logger("Y X Y, updating device "+d+" to zVal: "+f,1),lampi_admin[d].val=f;else if(c!=f&&e==f){logger("Y X X, The gui valui of "+d+" has changed",1);config.devices[a].val=c;updDevDb("devices",config.devices[a],function(a){logger("deviceGet:: store_device "+d+" finished OK",1)});var g="!R"+
config.devices[a].room+"D"+d+"F",g=0==c?g+"0":g+"dP"+c,g={tcnt:""+tcnt++,type:"raw",action:"gui",cmd:"zwave",gaddr:"868",uaddr:""+d,val:""+c,message:g};logger("deviceGet:: to icsHandler: "+JSON.stringify(g),1);icsHandler(g,null)}else if(f!=c&&e==c){logger("X X Y, Z-Wave changed; Update lampi gui for device "+d+" to value "+f,1);g={tcnt:""+tcnt++,type:"raw",action:"gui",cmd:"zwave",gaddr:"868",uaddr:""+d,val:""+f,message:"!R"+config.devices[a].room+"D"+d+"F"+f};switch(b){case "switch":g.message="!R"+
config.devices[a].room+"D"+d+"F"+f;break;case "dimmer":g.message="!R"+config.devices[a].room+"D"+d+"FdP"+f;break;default:logger("No Manual Update Action defined")}logger("Sending data to icsHandler: "+JSON.stringify(g),1);icsHandler(g,null);logger("Updated device to "+f+", cmd string: "+g.message,1)}else logger("Y X Z, reset admin for device "+d+" to lampi defined value "+c,1),lampi_admin[d].val=c});g.on("error",function(){logger("ERROR Updating dev: "+d+"",1)});g.on("timeout",function(){logger("deviceGet:: TIMEOUT");
g.abort()});g.setTimeout(5E3)});g.on("error",function(a){logger("deviceGet:: ERROR opening connection to zwave host, "+a.message,1)});g.end()}function getTime(){var a=new Date;return S(a.getHours()).padLeft(2,"0").s+":"+S(a.getMinutes()).padLeft(2,"0").s+":"+S(a.getSeconds()).padLeft(2,"0").s}function getTicks(){return Math.floor(Date.now()/1E3)}function getSunRise(){var a=SunCalc.getTimes(new Date,51.5,-.1);return Math.floor(a.sunrise.getTime()/1E3)}
function getSunSet(){var a=SunCalc.getTimes(new Date,51.5,-.1);return Math.floor(a.sunset.getTime()/1E3)}function printTime(a){a=new Date(a);return S(a.getHours()).padLeft(2,"0").s+":"+S(a.getMinutes()).padLeft(2,"0").s+":"+S(a.getSeconds()).padLeft(2,"0").s}function findHandset(a,b,d){var c=config.handsets;logger("findHandset:: length: "+c.length+", addr: "+a+", unit: "+b,2);var e;for(e=0;e<c.length&&(c[e].addr!=a||c[e].unit!=b||c[e].val!=d);e++);return e<c.length?e:-1}
function findDevice(a,b){var d=config.devices;logger("findDevice:: length: "+d.length+", room: "+a+", uaddr: "+b,2);var c;for(c=0;c<d.length&&(d[c].room!=a||d[c].uaddr!=b);c++);return c<d.length?c:-1}function idDevice(a,b){logger("idDevice:: length: "+config.devices.length+", room: "+a+", id: "+b,2);var d;for(d=0;d<config.devices.length&&(config.devices[d].room!=a||config.devices[d].id!=b);d++);return d<config.devices.length?d:-1}
function gaddrDevice(a,b){logger("gaddrDevice:: length: "+config.devices.length+", gaddr: "+a+", uaddr: "+b,2);var d;for(d=0;d<config.devices.length&&(config.devices[d].gaddr!=a||config.devices[d].uaddr!=b);d++);return d<config.devices.length?d:-1}function findScene(a){var b;for(b=0;b<config.scenes.length&&config.scenes[b].name!=a;b++);return b<config.scenes.length?b:-1}function idRoom(a){var b;for(b=0;b<config.rooms.length;b++)if(config.rooms[b].id==a)return b;return-1}
function addrSensor(a,b){logger("addrSensor:: address: "+a+", channel: "+b,2);if(void 0==config.sensors)return-1;var d;for(d=0;d<config.sensors.length&&(config.sensors[d].address!=a||config.sensors[d].channel!=b);d++);return d<config.sensors.length?d:-1}function delFromArray(a,b){var d;for(d=0;d<a.length&&a[d].id!=b.id;d++);a.splice(d,1)}function updInArray(a,b){var d;for(d=0;d<a.length;d++)if(a[d].id==b.id){a[d]=b;break}}
function iArray(a,b){var d;for(d=0;d<a.length;d++)if(a[d].id==b.id)return d;return-1}
function allOff(a,b){for(var d=[],c=[],e=0;e<config.devices.length;e++)if(config.devices[e].room==a&&"thermostat"!=config.devices[e].type){var f=config.devices[e].brand,f={tcnt:""+tcnt++,type:"raw",action:"gui",cmd:config.brands[f].fname,gaddr:""+config.devices[e].gaddr,uaddr:""+config.devices[e].uaddr,val:"0",message:"!R"+a+"D"+config.devices[e].uaddr+"F0"};c.push(JSON.stringify(f));d.push(function(a){setTimeout(function(){var d=c.shift();logger("allOff:: timeout str: "+d);broadcast(d,b);a(null,
"yes")},2E3)});"868"==config.devices[e].gaddr&&deviceSet(e,"0")}async.series(d,function(a,b){a?logger("allOFF:: ERROR ERROR: "+a,1):logger("allOff:: OKE OKE  finished, results: "+b,2)})}function alarmHandler(a,b){logger("alarmHandler:: buf: "+a,1)}
function consoleHandler(a,b){logger("consoleHandler:: request: "+a,1);var d="";switch(a){case "logs":exec("tail -30 "+logDir+"/PI-node.log",function(c,e,h){d=null===c?d+(e.split("\n").join("<br>")+"<br><br>"+h):d+("<br>  CONSOLE ERROR:   "+c+"     <br>  "+h);c={tcnt:""+tcnt++,type:"raw",action:"console",request:a,message:d};b.send(JSON.stringify(c))});return;case "zlogs":break;case "sunrisesunset":var c=SunCalc.getTimes(new Date,51.5,-.1),e=c.sunrise.getHours()+":"+("00"+c.sunrise.getMinutes()).slice(-2),
c=c.sunset.getHours()+":"+("00"+c.sunset.getMinutes()).slice(-2),d="<br>Sunrise: "+e+" Hrs<br>Sunset: "+c+" Hrs<br>";break;case "clients":logger("Active socket Clients:: ",1);d="<br>";clients.forEach(function(a){d+=a.name+" : "+a.type+"    <br>"});break;case "rebootdaemon":d="<br>Rebooting Node Daemon Now<br><br>this will take a minute<br>";setTimeout(function(){exec("nohup "+par.homeDir+"/scripts/PI-node -r &",function(a,c,b){})},2E3);break;case "printConfig":d=printConfig();break;default:logger("consoleHandler:: Unknown request: "+
a),d="Unknown request<br>"}e={tcnt:""+tcnt++,type:"raw",action:"console",request:a,message:d};b.send(JSON.stringify(e))}
function dbaseHandler(a,b,d){logger("dbaseHandler:: cmd: "+a,1);2<=debug&&(logger("dbaseHandler:: cmd: "+a+", args: ",2),console.log(b));switch(a){case "add_room":insertDb("rooms",b,function(a){logger("add_room finished OK "+a,1)});config.rooms.push(b);break;case "delete_room":deleteDb("rooms",b,function(a){logger("delete_room finished OK "+a,1)});delFromArray(config.rooms,b);break;case "add_scene":insertDb("scenes",b,function(a){logger("add_scene finished OK "+a,1)});config.scenes.push(b);break;
case "delete_scene":deleteDb("scenes",b,function(a){logger("delete_scenes finished OK "+a,1)});delFromArray(config.scenes,b);break;case "store_scene":updateDb("scenes",b,function(a){logger("store_scenes finished OK "+a,1)});updInArray(config.scenes,b);break;case "add_timer":insertDb("timers",b,function(a){logger("add_timer finished OK "+a,1)});config.timers.push(b);break;case "delete_timer":deleteDb("timers",b,function(a){logger("delete_timers finished OK "+a,1)});delFromArray(config.timers,b);break;
case "store_timer":updateDb("timers",b,function(a){logger("store_timers finished OK "+a,1)});updInArray(config.timers,b);break;case "add_handset":insertDb("handsets",b,function(a){logger("add_handset finished OK "+a,1)});config.handsets.push(b);break;case "delete_handset":deleteDb("handsets",b,function(a){logger("delete_handsets finished OK "+a,1)});delFromArray(config.handsets,b);break;case "list_user":var c={};3<=d.trusted?connection.query("Select * FROM users",function(a,b,g){a?logger("list_user:: ERROR: "+
a):(c={tcnt:tcnt++,type:"raw",action:"list_user",message:b},logger("list_user returning: "+c),d.send(JSON.stringify(c),function(a){void 0!==a&&(logger("list_user:: ERROR sending user data "+a,1),logger("list_user:: Socket: "+d.name+", type: "+d.type,1))}))}):(c={tcnt:tcnt++,type:"raw",action:"login",message:"Please login with a user that has a higher trustlevel"},d.send(JSON.stringify(c),function(a){void 0!==a&&(logger("list_user:: ERROR responding load database "+a,1),logger("list_user:: Socket: "+
d.name+", type: "+d.type,1))}),logger("list_user:: trust level socket "+d.name+" insufficient: "+d.trusted));break;case "add_user":insertDb("users",b,function(a){logger("add_user finished OK "+a,1)});config.users.push(b);break;case "delete_user":deleteDb("users",b,function(a){logger("delete_user finished OK "+a,1)}),delFromArray(config.users,b);case "store_user":updateDb("users",b,function(a){logger("store_user finished OK "+a,1)});updInArray(config.users,b);break;case "add_sensor":insertDb("sensors",
b,function(a){logger("add_sensor finished OK "+a,1)});config.sensors.push(b);break;case "delete_sensor":deleteDb("sensors",b,function(a){logger("delete_sensor finished OK "+a,1)});delFromArray(config.sensors,b);break;case "add_rule":config.rules.push(b);a={name:b.name,id:b.id,type:"rule",descr:b.descr,jrule:JSON.stringify(b.jrule),brule:JSON.stringify(b.brule)};insertDb("rules",a,function(a){logger("add_rule finished OK "+a,1)});break;case "store_rule":updInArray(config.rules,b);a={name:b.name,type:"rule",
id:b.id,active:b.active,descr:b.descr,jrule:JSON.stringify(b.jrule),brule:JSON.stringify(b.brule)};updateDb("rules",a,function(a){logger("store_rule finished OK "+a,1)});break;case "delete_rule":deleteDb("rules",b,function(a){logger("delete_rule finished OK "+a,1)});delFromArray(config.rules,b);break;case "store_setting":"debug"==b.name&&(debug=Number(b.val));"alarm"==b.name&&(3<=d.trusted?woonveilig.wvSet(b.val,function(a,b){logger("Alarm set to: "+b)},1):(c={tcnt:tcnt++,type:"raw",action:"login",
message:"Alarm can only be set with a user that has a higher trustlevel"},d.send(JSON.stringify(c),function(a){void 0!==a&&(logger("store_setting:: ERROR sending login request "+a,1),logger("store_setting:: Socket: "+d.name+", type: "+d.type,1))}),a=iArray(config.settings,b),b.val=config.settings[a].val,logger("store_setting:: trust of "+d.name+" too low: "+d.trusted+"to change "+config.settings[a].name,1)));updateDb("settings",b,function(a){logger("store_settings finished OK "+a,1);updInArray(config.settings,
b);a={};a.settings=config.settings;a={tcnt:tcnt++,type:"json",action:"upd_config",message:a};d.send(JSON.stringify(a),function(a){void 0!==a&&(logger("store_setting:: ERROR sending settings "+a,1),logger("store_setting:: Socket: "+d.name+", type: "+d.type,1))})});break;case "add_device":insertDb("devices",b,function(a){logger("add_device finished OK",1)});config.devices.push(b);break;case "delete_device":delDevDb("devices",b,function(a){logger("delete_device finished OK",1)});a=idDevice(b.room,b.id);
-1!=a?config.devices.splice(a,1):logger("dbaseHandler:: delete_device failed for index: "+a+", room: "+b.room+", id: "+b.id);break;case "store_device":updDevDb("devices",b,function(a){logger("store_device finished OK",1)});a=idDevice(b.room,b.id);-1!=a?config.devices[a]=b:logger("dbaseHandler:: store_device failed for index: "+a);break;default:logger("dbaseHandler:: Unknown command: "+a,1)}}
function createEnergyDb(a,b,d){var c=[];logger("createEnergyDb:: ",1);c+=void 0!==b.kw_hi_use?"DS:kw_hi_use:COUNTER:600:0:999999999 ":"";c+=void 0!==b.kw_lo_use?"DS:kw_lo_use:COUNTER:600:0:999999999 ":"";c+=void 0!==b.kw_hi_ret?"DS:kw_hi_ret:COUNTER:600:0:999999999 ":"";c+=void 0!==b.kw_lo_ret?"DS:kw_lo_ret:COUNTER:600:0:999999999 ":"";c+=void 0!==b.gas_use?"DS:gas_use:COUNTER:600:0:999999999 ":"";c+=void 0!==b.kw_act_use?"DS:kw_act_use:GAUGE:600:0:999999 ":"";c+=void 0!==b.kw_act_ret?"DS:kw_act_ret:GAUGE:600:0:999999 ":
"";c+=void 0!==b.kw_ph1_use?"DS:kw_ph1_use:GAUGE:600:0:999999 ":"";c+=void 0!==b.kw_ph2_use?"DS:kw_ph2_use:GAUGE:600:0:999999 ":"";c+=void 0!==b.kw_ph3_use?"DS:kw_ph3_use:GAUGE:600:0:999999 ":"";c+="RRA:AVERAGE:0.5:1:360 RRA:AVERAGE:0.5:30:288 ";c+="RRA:AVERAGE:0.5:90:672 ";c+="RRA:AVERAGE:0.5:360:744 ";c+="RRA:AVERAGE:0.5:216:1460 ";c+="RRA:MIN:0.5:90:672 ";c+="RRA:MAX:0.5:90:672 ";a="rrdtool create "+a+" --step 20 "+c;logger("createEnergyDb:: execStr: "+a,1);exec(a,function(a,c,g){null===a?(logger("createEnergyDb:: ok, stdout: "+
c+"; stderr: "+g,2),energyHandler(b,d)):logger("createEnergyDb:: ERROR: "+a+"; stderr: "+g)})}
function energyHandler(a,b){var d=rrdDir+"/db/e350.rrd",c=[];logger("energyHandler:: action: "+a.action+", brand: "+a.brand,1);fs.existsSync(d)||(logger("energyHandler:: rrdtool db "+d+" does not exist ... creating",1),createEnergyDb(d,a));c+=":"+Math.floor(1E3*Number(a.kw_hi_use));c+=":"+Math.floor(1E3*Number(a.kw_lo_use));c+=":"+Math.floor(1E3*Number(a.kw_hi_ret));c+=":"+Math.floor(1E3*Number(a.kw_lo_ret));c+=":"+Math.floor(1E3*Number(a.gas_use));c+=":"+Math.floor(1E3*Number(a.kw_act_use));c+=":"+
Math.floor(1E3*Number(a.kw_act_ret));c+=":"+Math.floor(1E3*Number(a.kw_ph1_use));c+=":"+Math.floor(1E3*Number(a.kw_ph2_use));c+=":"+Math.floor(1E3*Number(a.kw_ph3_use));d="rrdtool update "+d+" N"+c;logger("energyHandler:: execStr: "+d,2);exec(d,function(a,b,c){null===a?logger("energyHandler:: stdout: "+b+"; stderr: "+c,2):logger("energyHandler:: ERROR: "+a+"; stderr: "+c)});broadcast(JSON.stringify(a),b,"raw")}
function graphHandler(a,b){var d=a.gcmd,c=a.gtype,e=a.gperiod,f=a.gsensors,g,h,k,l,n=par.homeDir+"/rrd/db/",p=par.homeDir+"/www/graphs/",m="e350.rrd",t="ff0000 111111 00ff00 0000ff ff00ff 666666 00ffff ff3399 ffff00".split(" ");logger("graphHandler:: Starting for "+d+":"+c+":"+e+":"+f);void 0==f&&(logger("graphHandler:: No sensors defined",1),f=[]);switch(d){case "energy":switch(c){case "E_GAS":k=sensorType="gas_use";l="M3";break;case "E_ACT":sensorType="pwr act";k="pwr_act";l="kWhr";break;case "E_USE":sensorType=
"pwr use";k="pwr_use";l="kWhr";break;case "E_PHA":sensorType="phase use",k="pwr_pha",l="kWhr"}break;case "weather":case "sensors":switch(c){case "T":sensorType="temperature";k="all_temp";l="C";break;case "H":sensorType="humidity";k="all_humi";l=" %%";break;case "P":sensorType="airpressure",k="all_press",l="hPa"}}switch(e){case "1h":g="";break;case "1d":g="";break;case "1w":g=":step=3600";break;case "1m":g=":step=8640";break;case "1y":g=":step=21300";break;default:logger("graphHandler:: ERROR unknown period: "+
e,1)}for(var x=c="",u="",q=0;q<f.length;q++)h=q+1==f.length?"\\n":"","energy"==d?(m="e350.rrd",c+="DEF:t"+(q+1)+"="+n+m+":"+f[q]+":AVERAGE"+g+" "):(m=f[q]+".rrd",c+="DEF:t"+(q+1)+"="+n+m+":"+sensorType+":AVERAGE "),x+="LINE2:t"+(q+1)+"#"+t[q%t.length]+':"'+f[q]+h+'" ',u+="GPRINT:t"+(q+1)+':LAST:"'+f[q]+" %3.0lf "+l+h+'" ';d="/usr/bin/rrdtool graph "+p+k+"_"+e+".png"+(" -s N-"+e+' -a PNG -E --title="'+sensorType+' readings" ');d+='--vertical-label "'+sensorType+'" --width 750 --height 500 ';d+=c;d+=
x;d+=u;logger("graphHandler:: \n"+d,2);exec(d,function(c,d,e){null===c?(logger("graphHandler:: ok, stdout: "+d+"; stderr: "+e,2),broadcast(JSON.stringify(a),b,"raw")):logger("graphHandler:: ERROR: "+c+"; stderr: "+e)})}
function guiHandler(a,b){logger("guiHandler:: buf: "+a,1);var d=gaddrDevice(a.gaddr,uaddr);"868"==config.devices[d].gaddr&&deviceSet(d,a.val);d={tcnt:""+tcnt++,type:"json",action:"gui",cmd:a.cmd,gaddr:""+a.gaddr,uaddr:""+a.uaddr,val:""+a.val,message:a.ics};logger("guiHandler:: to broadcast: "+JSON.stringify(d),2);broadcast(JSON.stringify(d),b)}
function icsHandler(a,b){var d=a.message,c=/\d+/;switch(d.substr(0,2)){case "!R":var e="",f=d.match(c);if(-1!=d.indexOf("Fa")){allOff(f,b);break}var g=d.indexOf("D"),h=d.substr(g+1,2).match(c);logger("icsHandler:: uaddr: "+h,2);g=d.indexOf("FdP");-1!=g?(e=c=Number(d.substr(g+3,2).match(c)),logger("icsHandler:: Found dimmer value: "+c,2)):(g=d.indexOf("F"),c=d.substr(g+1,2).match(c),0==c&&(e="off"),1==c&&(e="on"),logger("icsHandler:: Found switch value: "+c,2));g=findDevice(f,h);if(0>g||g>config.devices.length){logger("icsHandler:: ERROR for index: "+
g+", #devices: "+config.devices.length+" room: "+f+", uaddr: "+h+", ics: "+d,1);break}var f=config.devices[g].gaddr,k=config.brands[config.devices[g].brand].fname,e={tcnt:""+tcnt++,type:"raw",action:"gui",cmd:k,gaddr:""+f,uaddr:""+h,val:""+e,message:d};config.devices[g].val=c;"868"==f&&deviceSet(g,c);updDevDb("devices",config.devices[g],function(a){logger("icsHandler:: updDevDb ics "+d+" finished OK",1)});logger("icsHandler:: to broadcast: "+JSON.stringify(e),2);broadcast(JSON.stringify(e),b);break;
case "!F":logger("icsHandler:: !F Scene handler",1);queue.qinsert({ticks:getTicks(),scene:"gui",seq:"!R1D1FdP10,00:00:01"});break;case "!T":logger("icsHandler:: Timer command");queue.qinsert({ticks:getTicks(),scene:"gui",seq:"!R1D1F0"});break;case "!A":logger("icsHandler:: Handset message "+a.message,1);h=d.match(c);g=d.indexOf("D");f=d.substr(g+1,2).match(c);g=d.indexOf("F");e=d.substr(g+1,2).match(c);logger("icsHandler:: handset addr: "+h+",unit: "+f+", val: "+e,1);e=findHandset(h,f,e);if(0<=e)switch(e=
config.handsets[e],e.type){case "handset":case "scene":queueScene(e.scene);break;default:logger("icsHandler:: handset type not recognized: "+e.type,1)}else logger("icsHandler:: Handset "+h+" not found",1);break;case "!Q":logger("icsHandler:: All Off Q command",1);break;default:logger("icsHandler:: Unknown command ics code: <"+d+">",1)}}
function loginHandler(a,b){var d=a.login.toLowerCase();logger("loginHandler:: login: "+d,1);var c=connection.query("SELECT * FROM users WHERE login=?",[d],function(d,f,g){d?console.log("queryDbase:: err: "+d+", query: <"+c.sql+">"):(1<=debug&&console.log("loginHandler:: returns: \n",f),0==f.length?(logger("loginHandler:: ERROR not results for user "+a.login,1),a.action="login",socketHandler(JSON.stringify(a),b)):1<f.length?logger("loginHandler:: ERROR returning "+f.length+" values",1):f[0].passw==
a.password?(logger("loginHandler:: checked user name: "+f[0].name,1),0==b.trusted?(d={tcnt:tcnt++,type:"json",action:"load_database",cmd:"",response:config},b.send(JSON.stringify(d),function(a){void 0!==a&&(logger("loginHandler:: ERROR responding load database "+a,1),logger("loginHandler:: Socket: "+b.name+", type: "+b.type,1))})):b.send(JSON.stringify({tcnt:a.tcnt,type:"raw",action:"alert",message:"Login Success<br>Depending on your trustlevel services will be enabled"}),b),b.trusted=f[0]["class"]):
(logger("loginHandler:: ERROR wrong password ",1),a.action="login",a.message="Wrong Password",b.send(JSON.stringify(a))))})}
function sensorHandler(a,b){var d=addrSensor(a.address,a.channel);if(0>d)logger("sensorHandler:: ERROR unknown index for sensor: "+a.address+":"+a.channel,1);else{logger("sensorHandler index: "+d+" name: "+config.sensors[d].name,2);var c=config.sensors[d].name;void 0!==a.temperature&&config.sensors[d].sensor.hasOwnProperty("temperature")&&(config.sensors[d].sensor.temperature.val=a.temperature);void 0!==a.humidity&&config.sensors[d].sensor.hasOwnProperty("humidity")&&(config.sensors[d].sensor.humidity.val=
a.humidity);void 0!==a.airpressure&&config.sensors[d].sensor.hasOwnProperty("airpressure")&&(config.sensors[d].sensor.airpressure.val=a.airpressure);void 0!==a.altitude&&(config.sensors[d].sensor.altitude.val=a.altitude);void 0!==a.windspeed&&(config.sensors[d].sensor.windspeed.val=a.windspeed);void 0!==a.winddirection&&(config.sensors[d].sensor.winddirection.val=a.winddirection);void 0!==a.rainfall&&(config.sensors[d].sensor.rainfall.val=a.rainfall);void 0!==a.luminescense&&config.sensors[d].sensor.hasOwnProperty("liminescense")&&
(config.sensors[d].sensor.luminescense.val=a.luminescense);var e=rrdDir+"/db/"+c+".rrd",f=[];logger("sensorHandler:: index: "+d+", from: "+(void 0!==b&&null!==b?b.name:"datagram")+", name: "+c+", addr: "+a.address+", chan: "+a.channel+", temp: "+a.temperature,1);fs.existsSync(e)||(logger("sensorHandler:: rrdtool db "+e+" does not exist ... creating",1),createSensorDb(e,a,b));f+=void 0!==a.temperature?":"+Number(a.temperature):"";f+=void 0!==a.humidity?":"+Number(a.humidity):"";f+=void 0!==a.airpressure?
":"+Number(a.airpressure):"";f+=void 0!==a.altitude?":"+Number(a.altitude):"";f+=void 0!==a.windspeed?":"+Number(a.windspeed):"";f+=void 0!==a.winddirection?":"+Number(a.winddirection):"";f+=void 0!==a.rainfall?":"+Number(a.rainfall):"";f+=void 0!==a.luminescense?":"+Number(a.luminescense):"";d="rrdtool update "+e+" N"+f;logger("sensorHandler:: execStr: "+d,2);exec(d,function(c,b,d){null===c?logger("sensorHandler:: stdout: "+b+"; stderr: "+d,2):(logger("sensorHandler:: ERROR: for rrd str: "+f+"\n Rrd Error: "+
c+"; stderr: "+d,0),console.log("sensorHandler:: string: ",a))});broadcast(JSON.stringify(a),b,"raw")}}
function createSensorDb(a,b,d){var c=[];logger("createSensorDb:: ",1);c+=void 0!==b.temperature?"DS:temperature:GAUGE:600:-20:95 ":"";c+=void 0!==b.humidity?"DS:humidity:GAUGE:600:0:100 ":"";c+=void 0!==b.airpressure?"DS:airpressure:GAUGE:600:900:1100 ":"";c+=void 0!==b.altitude?"DS:altitude:GAUGE:600:-100:1200 ":"";c+=void 0!==b.windspeed?"DS:windspeed:GAUGE:600:0:200 ":"";c+=void 0!==b.winddirection?"DS:winddirection:GAUGE:600:0:359 ":"";c+=void 0!==b.rainfall?"DS:rainfall:GAUGE:600:0:25 ":"";c+=
void 0!==b.luminescense?"DS:luminescense:GAUGE:600:0:400 ":"";c+="RRA:AVERAGE:0.5:1:480 RRA:AVERAGE:0.5:5:672 ";c+="RRA:AVERAGE:0.5:20:744 ";c+="RRA:AVERAGE:0.5:480:365 ";c+="RRA:MIN:0.5:20:720 ";c+="RRA:MAX:0.5:20:720 ";c+="RRA:AVERAGE:0.5:20:720 ";a="rrdtool create "+a+" --step 180 "+c;logger("createSensorDb:: execStr: "+a,1);exec(a,function(a,c,g){null===a?(logger("createSensorDb:: ok, stdout: "+c+"; stderr: "+g,2),sensorHandler(b,d)):logger("createSensorDb:: ERROR: "+a+"; stderr: "+g)})}
function sceneHandler(a,b){switch(a.cmd){case "run_scene":logger("sceneHandler:: run scene selected",1);queueScene(a.message);break;case "cancel_scene":logger("sceneHandler:: cancel scene selected",1);break;default:logger("sceneHandler:: Command not recognized, "+a.cmd,1)}}
function settingHandler(a,b){switch(a.cmd){case "store_config":logger("settingHandler:: store_config database name selected",1);break;case "load_config":logger("settingHandler:: load_config database name selected",1);break;case "list_config":logger("settingHandler:: list_config database name selected",1)}}
function socketHandler(a,b){var d=a+"",c=d.search(/\}{/);if(-1!=c){var e=d.substr(0,c+1),d=d.substr(c+1);logger("socketHandler:: string 1: "+e,2);logger("socketHandler:: string 2: "+d,2);socketHandler(e,b);socketHandler(d,b)}else{logger("socketHandler:: Starting with data: "+a,2);try{e=JSON.parse(d)}catch(f){logger("socketHandler:: JSON parse error: "+f,1);return}void 0==b&&(logger("socketHandler socket undefined. action: "+e.action,2),2<=debug&&console.log("data: ",d),b=null);logger("Handler:: Action: "+
e.action,2);switch(e.action){case "alarm":logger("socketHandler:: alarm received",1);break;case "console":consoleHandler(e.request,b);break;case "dbase":dbaseHandler(e.cmd,e.message,b);break;case "energy":energyHandler(e,b);break;case "graph":graphHandler(e,b);break;case "gui":"raw"==e.type&&icsHandler(e,b);"json"==e.type&&guiHandler(e,b);break;case "handset":"raw"==e.type&&icsHandler(e,b);"json"==e.type&&guiHandler(e,b);break;case "login":logger("socketHandler:: login message received");loginHandler(e,
b);break;case "load_database":logger("socketHandler:: load_database received",1);d={};0==b.trusted?(logger("socketHandler:: Socket is not trusted: "+b.name,1),d={tcnt:tcnt++,type:"raw",action:"login",message:"Please login first"}):(logger("socketHandler:: Socket is trusted: "+b.name,1),d={tcnt:tcnt++,type:"raw",action:"load_database",cmd:"",response:config});logger("socketHandler:: Sending "+d.action+" message to socket: "+b.name);b.send(JSON.stringify(d),function(a){void 0!==a&&(logger("socketHandler:: ERROR responding load database "+
a,1),logger("socketHandler:: Socket: "+b.name+", type: "+b.type,1))});break;case "ping":case "PING":logger("socketHandler:: ping received",2);d={tcnt:tcnt++,action:"ack",type:"raw",message:"OK"};"ws"==b.type&&b.send(JSON.stringify(d));break;case "scene":logger("socketHandler:: scene command received",2);sceneHandler(e,b);break;case "setting":logger("socketHandler:: setting received: "+e.cmd,2);settingHandler(e,b);break;case "user":logger("socketHandler:: user command received",1);break;case "weather":logger("socketHandler:: weather received, type: "+
e.type+", addr:chan: "+e.address+":"+e.channel,1),e.action="sensor";case "sensor":sensorHandler(e,b);break;default:logger("SocketHandler:: action not recognized: "+e.action,1)}}}function queueScene(a){a=a.seq.split(",");for(var b=0;b<a.length;b+=2){logger("queueScene item: "+b/2+", val: "+a[b]+", time: "+a[b+1],1);var d=a[b+1].split(":"),d=+(3600*d[0])+60*d[1]+d[2];logger("qinsert:: ticks: "+d+", name: "+a[b]+", seq: "+a[b],1);queue.qinsert({ticks:Number(d)+getTicks(),name:"gui",seq:a[b]})}}
function queueDevice(a,b,d,c,e){c=d.split(":");c=+(3600*c[0])+60*c[1]+c[2];e="!R"+config.devices[a].room+config.devices[a].id+("dimmer"==config.devices[a].type?"FdP":"F")+b;logger("queueDevice:: item: "+e+", dev: "+config.devices[a].name+", val: "+b+", time: "+d,1);queue.qinsert({ticks:Number(c)+getTicks(),name:"gui",seq:e})}
var queue=new function(){this.qlist=[];this.qpush=function(a){a={ticks:getTicks(),name:a.name,seq:a.seq};this.qlist.push(a)};this.qinsert=function(a){var b;for(b=0;b<this.qlist.length&&!(this.qlist[b].ticks>a.ticks);b++);this.qlist.splice(b,0,a)};this.qpop=function(){var a,b=getTicks();for(a=0;a<this.qlist.length&&!(this.qlist[a].ticks>b);a++);return this.qlist.splice(0,a)};this.qprint=function(){var a=getTicks(),b=queue.qtim();if(null!=b)for(logger("print queue for ticks: "+a+", next runnable: "+
b+" secs",1),a=0;a<this.qlist.length;a++)console.log("\t\t",this.qlist[a])};this.qtim=function(){if(0==this.qlist.length)return null;var a=getTicks();return this.qlist[0].ticks-a}};
function queueHandler(){for(var a=queue.qpop();null!=a&&0<a.length;){2<=debug&&console.log("queueHandler:: pop task: ",a);for(var b=0;b<a.length;b++){var d;1<=debug&&console.log("\t\tqueueHandler:: processing task: ",a[b]);switch(a[b].name){case "gui":d=a[b].seq.split(",");for(var c=0;c<d.length;c+=2)var e={tcnt:""+tcnt++,type:"raw",action:"gui",cmd:"",gaddr:"",uaddr:"",val:"",message:d[c]};socketHandler(JSON.stringify(e));break;case "scene":logger("queueHandler:: scene found",1);case "rule":logger("queueHandler:: Exucuting rule: "+
a[b].seq.id+", "+a[b].seq.cmd,2);switch(a[b].seq.cmd){case "active":config.rules[a[b].seq.id].active=a[b].seq.val;break;default:logger("queueHandler:: rule command unrecognized: "+a[b].seq.cmd,1)}break;default:logger("queueHandler:: executing: "+a[b].name,1);d=findScene(a[b].name);d=config.scenes[d].seq.split(",");for(c=0;c<d.length;c+=2)e={tcnt:""+tcnt++,type:"raw",action:"gui",cmd:"",gaddr:"",uaddr:"",val:"",message:d[c]};socketHandler(JSON.stringify(e))}}a=queue.qpop()}2<=debug&&queue.qprint()}
function ruleHandler(){if(void 0==config.rules)logger("ruleHandler:: ERROR rules not defined",1);else{for(var a=0;a<config.rules.length;a++)if("Y"==config.rules[a].active){logger("ruleHandler:: rule "+config.rules[a].name+" is active",2);try{logger("ruleHandler:: eval "+config.rules[a].name,1);logger("ruleHandler:: "+config.rules[a].jrule,3);var b=eval(config.rules[a].jrule);logger("ruleHandler:: eval rule "+config.rules[a].name+" returned: "+b,3);"stopRule"==b&&(config.rules[a].active="N");b===parseInt(b,
10)&&(config.rules[a].active="N",queue.qinsert({ticks:Number(b)+getTicks(),name:"rule",seq:{id:a,cmd:"active",val:"Y"}}))}catch(d){logger("ruleHandler:: Error evaluating rule "+config.rules[a].name+", error: "+d,1)}}else logger("ruleHandler:: rule "+config.rules[a].name+" not active",3);logger("ruleHandler:: Ended",2)}}logger("MAIN part started",1);async.series([function(a){connectDbase(a)},function(a){zwave_init(function(b,d){a(null,d)})},function(a){loadDbase(a)}],function(a,b){main(a,b)});
function start_loops(){loops=[];logger("All Init functions done",1);alarm_loop();timer_loop();poll_loop();zwave_loop()}function main(a,b){1<=debug&&console.log("Return values: \n",b);userver.bind(udpPort);logger("Starting Loops");start_loops();logger("Starting Static Webserver");app.use(serveStatic(__dirname+"/www"));app.listen(webPort)}
function timer_loop(){logger("Starting timer_loop",1);var a=setInterval(function(){var a=new Date,d=Math.floor(a.getTime()/1E3);logger("----------- TIMER EXPIRED? ------------",1);queryDbase("SELECT * from timers",function(c,e){c?logger("timer_loop:: ERROR table timers not found, "+c,1):(config.timers=e,logger("timer_loop:: #timers: "+e.length,2),queryDbase("SELECT * from scenes",function(c,g){config.scenes=g;logger("timer_loop:: now   date: "+a,1);for(var h=SunCalc.getTimes(a,52.13,5.58),k=0;k<e.length;k++){var l=
e[k].tstart.split(":"),n=l[0],p=l[1],l=e[k].startd.split("/"),m=l[0],t=l[1],x=Number(l[2])+2E3,l=e[k].endd.split("/"),u=l[0],q=l[1],l=Number(l[2])+2E3,r,w,y,z,A,v;y=a.getDate();z=a.getMonth();A=a.getFullYear();switch(n){case "96":v=1800*-Number(p);r=h.sunrise.getHours();w=h.sunrise.getMinutes();break;case "97":v=1800*Number(p);r=h.sunrise.getHours();w=h.sunrise.getMinutes();break;case "98":v=1800*-Number(p);r=h.sunset.getHours();w=h.sunset.getMinutes();break;case "99":v=1800*Number(p);r=h.sunset.getHours();
w=h.sunset.getMinutes();break;default:v=0,r=n,w=p}r=Math.floor((new Date(A,z,y,r,w,0,0)).getTime()/1E3)+v;logger("Timer correction is: "+v,2);logger("timer_loop:: run   date: "+r,2);logger("timer_loop:: now   date: "+d,2);0<r-d&&logger("timer_loop:: name: "+e[k].name+", runnable in: "+(r-d)+" secs",1);if(d<r)logger("Timer not yet started ",2);else if(u=Math.floor((new Date(l,q-1,u,0,0,0,0)).getTime()/1E3),logger("timer_loop:: end date:   "+u,2),d>u)logger("Timer enddate reached: "+u,1);else if(n=
Math.floor((new Date(x,t-1,m,n,p,0,0)).getTime()/1E3),logger("timer_loop:: start date: "+n,2),d<n)logger("Timer before start date",1);else if(d-r>timer_interval/500+1)logger("Timer already started some time ago",2);else if(d-r>timer_interval/1E3)logger("Timer already started",2);else if("x"==e[k].months[Number(a.getMonth())-1])logger("Timer, this is a blackout month",1);else if("x"==e[k].days[Number(a.getDay())-1])logger("Timer, this is a blackout day",1);else for(logger("timer_loop:: Starting timer name: "+
e[k].name,1),n=0;n<config.scenes.length;n++)if(g[n].name==e[k].scene)for(p=g[n].seq.split(","),m=0;m<p.length;m+=2)logger("scene item: "+m/2+", val: "+p[m]+", time: "+p[m+1],1),t=p[m+1].split(":"),t=+(3600*t[0])+60*t[1]+t[2],logger("qinsert:: ticks: "+t+", name: "+g[n].name+", seq: "+p[m],1),queue.qinsert({ticks:Number(t)+getTicks(),name:"gui",seq:p[m]})}}))})},timer_interval);loops.push(a)}
function zwave_loop(){logger("Starting zwave_loop");var a=0,b=setInterval(function(){2<=debug&&(logger("----------- ACTIVE CLIENTS ------------",1),logger("Active socket Clients:: ",1),clients.forEach(function(a){console.log(a.type+" Client: "+a.name)}));logger("----------- ACTIVE ZWAVE DEVICES ------------",1);zwave_init(function(a,c){a?logger("zwave_loop:: ERROR unable to run zwave_init, "+a,1):logger("zwave_loop:: zwave_init: "+c,1)});Date.now();Object.keys(devices).forEach(function(a){if(1<a){logger("key: "+
a,1);var c=devices[a].instances[0].commandClasses;2<debug&&console.log(c);Object.keys(c).forEach(function(b){switch(b){case "37":var f=c[b].data.level.value+0,g=c[b].data.level.updateTime,h=c[b].data.level.invalidateTime;logger("\tCl: "+b+" Switch           , val "+f+", upd: "+printTime(1E3*g)+", inval: "+printTime(1E3*h),1);break;case "38":f=c[b].data.level.value+0;g=c[b].data.level.updateTime;h=c[b].data.level.invalidateTime;logger("\tCl: "+b+" Dimmer           , val "+f+", upd: "+printTime(1E3*
g)+", inval: "+printTime(1E3*h),1);break;case "39":logger("\tCl: "+b+" Dimmer?          , val "+f,2);break;case "48":if(0==c[b].data.interviewDone.value){logger("WARNING:: Device "+b+" Dead",1);break}f=c[b].data[1].level.value+0;g=c[b].data[1].level.updateTime;logger("\tCl: "+b+" PIR              , val "+f+", upd: "+printTime(1E3*g),1);break;case "49":if(0==c[b].data.interviewDone.value){logger("WARNING:: Device "+b+" Dead",0);break}g={tcnt:""+tcnt++,action:"sensor",type:"json",address:a+"",channel:"0"};
1 in c[b].data&&(f=c[b].data[1].val.value+0,logger("\tCl: "+b+" Temp             , val "+f,1),h=addrSensor(a,0),config.sensors[h].sensor.temperature.val=f,g.temperature=f);3 in c[b].data&&(f=c[b].data[3].val.value+0,logger("\tCl: "+b+" Lumi             , val "+f,1),h=addrSensor(a,0),config.sensors[h].sensor.luminescense.val=f,g.luminescense=f);5 in c[b].data&&(f=c[b].data[5].val.value+0,logger("\tCl: "+b+" Humi             , val "+f,1),h=addrSensor(a,0),config.sensors[h].sensor.humidity.val=f,g.humidity=
f);logger("zwave_loop:: starting sensor handler for device: "+a,2);sensorHandler(g);break;case "67":if(0==c[b].data.interviewDone.value){logger("WARNING: Thermostat device "+a+" Dead",0);break}f=c[b].data[1].val.value+0;logger("\tCl: "+b+" Thermostat       , val "+f,1);break;case "112":logger("\tCl: "+b+" Configuration",2);break;case "128":f=c[b].data.last.value;g=c[b].data.last.updateTime;logger("\tCl: "+b+" Battery         , "+f+"%, upd: "+printTime(1E3*g),1);break;case "132":logger("\tCl: "+b+
" Wakeup",2);break;case "133":logger("\tCl: "+b+" Association",2);break;case "142":logger("\tCl: "+b+" MultiCh Assoc",2);break;case "143":logger("\tCl: "+b+" MultiCh Assoc",2);break;case "156":logger("\tCl: "+b+" Alarm Sensor",1);break;default:logger("\tCl: "+b+" Device not yet handled",2)}})}});a++},log_interval);loops.push(b)}
function poll_loop(){logger("Starting poll_loop");var a=setInterval(function(){logger("-----------       POLL      ------------",1);connection.query("SELECT * from devices",function(a,d,c){if(a)logger("poll_loop:: ERROR reading devices, "+a,1);else for(config.devices=d,3<=debug&&console.log("query devices:: is: \n",d),a=0;a<config.devices.length;a++)"868"==config.devices[a].gaddr&&deviceGet(a,config.devices[a].type)})},poll_interval);loops.push(a)}
function alarm_loop(){logger("Starting alarm_loop",1);var a=0,b=setInterval(function(){var b=Math.floor(Date.now()/1E3);logger("alarm_loop:: zTime: "+(b-alarm_interval),2);logger("----------- QUEUE HANDLER -------------",2);queueHandler();logger("----------- RULES HANDLER -------------",2);ruleHandler();void 0==devices||0==Object.getOwnPropertyNames(devices).length?logger("alarm_loop:: ERROR No devices found, or zwave gateway down",2):(zwave_upd_options.path="/ZWaveAPI/Data/"+(b-alarm_interval),b=
http.request(zwave_upd_options,zwave_upd_cb),b.on("error",function(a){logger("alarm_loop:: ERROR no connection to zwave host, "+a.message,1)}),b.end(),!0===devices[9].instances[0].commandClasses[48].data[1].level.value&&(console.log("Fibaro ALARM"),b={tcnt:868,type:"json",action:"alarm",scene:"Living on",message:"Fibaro ALARM"},0==a&&(a=1,broadcast(JSON.stringify(b),null),logger("FIBARO ALARM",0),setTimeout(function(){a=0},24E4))),!0===devices[11].instances[0].commandClasses[48].data[1].level.value&&
(console.log("Aeon ALARM"),b={tcnt:868,type:"json",action:"alarm",scene:"",message:"AEON ALARM"},0==a&&(a=1,broadcast(JSON.stringify(b),null),logger("AEON ALARM",0),setTimeout(function(){a=0},24E4)),logger("AEON ALARM",0)))},alarm_interval);loops.push(b)};