{
// Comments are allowed in this file for reading, but not remembered and written back by the GUI!!
//
// *	Please remember that records are separated by ',' however, the last element in a list may NOT
// 		contain a comma sign.
// **	Strings are surrounded by [] and other objects by {}. Do not mix these or the program will not work.
// ***	All element shave an id, and most a type. This is used in the LamPI-node.js file

	"settings": [
	// Do NOT delete any of the setting parameters.
        {
            "descr": "Debug level in GUI and backend",
			"id": "0",
            "val": "1",
            "name": "debug"
        },											// Do not forget the ',' as separator
        {
			"descr": "Layout of devices and sensors on the screen, in blocks or in rows",
            "id": "1",
            "val": "0",
            "name": "LampiMode"
        },
        {
			"descr": "Users Administration",
            "id": "2",
            "val": "0",
            "name": "users"
        },
        {
			"descr": "Alarm use",
            "id": "3",
            "val": "2",								// Disarm
            "name": "alarm"
        },
        {
			"descr": "Select our look and feel set",
            "id": "4",
            "val": "styles\/scale-grey.css",
            "name": "skin"
        },
        {
			"descr": "Backup and Restore of configuration",
            "id": "5",
            "val": "0",
            "name": "backup"
        },
		{
			"descr": "Several console actions",
            "id": "6",
            "val": "0",
            "name": "console"
        },
		{
			"descr": "Define rules with",
            "id": "7",
            "val": "1",
            "name": "rules"
        },
		{
			"descr": "Defined Dials",
            "id": "8",
            "val": "1",
            "name": "dials"
        }											// The last element has no ','
    ],
	
    "controllers": [
	// Do NOT delee any of the controller elements
        {
            "id": "1",
            "name": "ICS",
            "fname": "backend_ics.php"
        },
        {
            "id": "2",
            "name": "RASP",
            "fname": "backend_rasp.php"
        }
    ],

// Room definitions. Rooms are the containers for the devices. In principle devices
// could exist independent from rooms, but in the GUI devices are always defined in rooms.
//
// You can add, modify or delete lines in this definitions.
    "rooms": [
        {
			"descr": "The main living room",
            "id": "1",
            "name": "Living"
        },
        {
            "descr": "Our extension",
			"id": "6",
            "name": "Extension"
        }
    ],

// Brands are used for devices, to match the device name with the filename with
// the corect executable (we need something similar for sensors).
// Do NOT delete eny of these elements, but you can add if you have more transmitterss
    "brands": [
        {
		// fname is used as the short (file)name id
			"descr": "Brands of Transmitters",
            "id": "0",
            "name": "Klik Aan (new)",
            "fname": "kaku"						// This name is used to identify the file in ~/exe to execute the tranmitter
        },
        {
            "id": "1",
            "name": "Action",
            "fname": "action"
        },
        {
            "id": "2",
            "name": "Blokker",
            "fname": "blokker"
        },
        {
            "id": "3",
            "name": "Klik Aan (oud)",
            "fname": "kiku"
        },
        {
            "id": "4",
            "name": "Elro",
            "fname": "elro"
        },
        {
		// Livolo is simple switching stuff from China
            "id": "5",
            "name": "Livolo",
            "fname": "livolo"
        },
        {
		// Kopou is even worse than Livolo
            "id": "6",
            "name": "Kopou",
            "fname": "kopou"
        },
		{
		// Z-Wave is administered from LamPI, but ALL low-level functions
		// done through Zway application on port 8083
			"id": "7",
            "name": "Zwave",
            "fname": "zwave"
		}
    ],

//
// The system starts with ONE user in the database.cfg file.
// However, when running init, the system will recognize this special user and create a new password,
// and if necessary more users for the system.
// Class is the privileges that the user has. 0 is lowest (guest), 1 is normal, 2 super and 3 is highest/admin
//
	"users": [
		{
			"id": "0",
			"descr": "First default user, need password after",
			"type":"users",
			"name": "Admin User",
			"login": "admin",
			"passw": "0000",
			"class": "3"
		},
		{
			"id": "1",
			"descr": "First default user, need password after",
			"type":"users",
			"name": "Jan Klaassen",
			"login": "jan",
			"passw": "0000",
			"class": "2"
		}
	],
//
// Devices now may contain a "desc" field for a description
// and a "uaddr" field. The latter will in future be used to 
// contain the physical unit id vs the GUI assigned id in "id".
//
// ICS Messages !RxxDyyFdpzz here xx is room and yy is uaddr
//
// - The GUI uses room and id to identify devices
// - The DAEMON use the room and the uaddr to identify addresses
// - DEVICES are addressed using the gaddr and uaddr
//
    "devices": [
        {
			"descr": "Corner Left in Living",
			"id": "D1",
			"room": "1",
			"uaddr": "1",
			"gaddr": "100",
			"name": "lamp left",
			"type": "dimmer",
			"val": "0",
			"lastval": "5",
			"brand": "0"
		},
		{
			"descr": "Uplight in Living",
			"id": "D2",
			"room": "1",
			"uaddr": "4",
			"gaddr": "868",
			"name": "uplight",
			"type": "dimmer",
			"val": "0",
			"lastval": "0",
			"brand": "7"
        }
    ],
	
// Scenes are only defined as part of the GUI and the LamPI-Daemon functions
    "scenes": [
        {
            "id": "1",
            "val": "0",
            "name": "living on",
			"type": "scene",
            "seq": "!R1D1FdP20,00:00:01,!R1D2FdP15,00:00:02"
        },
        {
            "id": "2",
            "val": "0",
            "name": "living off",
			"type": "scene",
            "seq": "!R1D2F0,00:00:05,!R1D1F0,00:00:30"
        }
    ],
    "timers": [
        {
			"descr": "Make light in living 98 is before Sunset",
            "id": "1",
            "name": "Living Start",
			"type": "timer",
            "scene": "living on",
            "tstart": "98:02",
            "startd": "01\/01\/13",
            "endd": "31\/12\/20",
            "days": "mtwtfss",
            "months": "jfmamjjasond",
			"skip": "0"
        },
        {
            "id": "2",
            "name": "Living Stop",
			"type": "timer",
            "scene": "living off",
            "tstart": "00:15",
            "startd": "01\/01\/13",
            "endd": "31\/12\/20",
            "days": "mtwtfss",
            "months": "jfmamjjasond",
			"skip": "0"
        }
    ],
//
// Handsets are used from handheld transmitters to send commands over 433 MHz
//
    "handsets": [
        {
            "id": "1",
            "name": "remote 1",
            "brand": "kaku",
            "addr": "9117238",
            "unit": "12",
            "val": "1",
            "type": "scene",
            "scene": "!R1D1FdP25,00:00:01,!R1D2FdP18,00:00:01,!R1D3FdP18,00:00:01,!R1D4F1,00:00:01,!R6D1F1,00:00:01,!R6D4F1,00:00:01,!R7D1F1,00:00:01"
        },
        {
            "id": "1",
            "name": "remote 1",
            "brand": "kaku",
            "addr": "9117238",
            "unit": "12",
            "val": "0",
            "type": "scene",
            "scene": "!R1D1F0,00:00:01,!R1D2F0,00:00:01,!R1D3F0,00:00:01,!R1D4F0,00:00:01,!R6D1F0,00:00:01,!R6D4F0,00:00:0,!R7D1F0,00:00:01"
        }
    ],


//
// Sensors are in process of being fully implemented. 
//
	"sensors": [
		{
			"descr": "440 MHz weather sensor outside in front of the house",
            "id": "1",
            "name": "Outside",
			"location": "outside",
            "brand": "wt440h",
            "address": "1",
            "channel": "0",
			"type": "sensor",
			"sensor": {
				"temperature": {
					"val": "0",
					"lastVal": "",
					"lastUpdate":""
				},
				"humidity": {
					"val": "0",
					"lastVal": "",
					"lastUpdate": ""
				}
			}
        }
	],
//
// Every rule has a unique name, a description, the JSON encoded javascript code and the JSON encoded Blockly code
//
	"rules": [
		{
			"id":0,
			"descr":"EXAMPLE 0",
			"name":"hoi",
			"type":"rule",
			"active":null,
			"jrule":"console.log('hoi'); ",
			"brule":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"text_console\" id=\"5\" inline=\"false\" x=\"176\" y=\"159\"><value name=\"console\"><block type=\"text\" id=\"6\"><field name=\"TEXT\">hoi</field></block></value></block></xml>"
		}
	],

//	Depending on the brand/type of the sensor it has capabilities
//	
	"sensorBrand" : {
		"wt440h": {
			"caps": [ "temperature", "humidity" ]
		},
		"bmp085": {
			"caps": [ "temperature", "airpressure" ]
		},
		"lm75": {
			"caps": [ "temperature" ]
		}
	}

// End of File
}